{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "users_1_lastName": {
      "type": "string",
      "defaultValue": "none"
    },
    "connections_azureblob_externalid": {
      "defaultValue": "/subscriptions/02b0bea5-460a-408e-b7ad-a8b7c69bc55a/resourceGroups/NewsBoard/providers/Microsoft.Web/connections/azureblob",
      "type": "String"
    },
    "connections_servicebus_1_externalid": {
      "defaultValue": "/subscriptions/02b0bea5-460a-408e-b7ad-a8b7c69bc55a/resourceGroups/NewsBoard/providers/Microsoft.Web/connections/servicebus-1",
      "type": "String"
    },
    "connections_sql_1_externalid": {
      "defaultValue": "/subscriptions/02b0bea5-460a-408e-b7ad-a8b7c69bc55a/resourceGroups/NewsBoard/providers/Microsoft.Web/connections/sql-1",
      "type": "String"
    },
    "service_NewsBoard_Insights_name": {
      "defaultValue": "NewsBoard-Insights",
      "type": "String"
    },
    "components_NewsBoard_Insights_externalid": {
      "defaultValue": "/subscriptions/02b0bea5-460a-408e-b7ad-a8b7c69bc55a/resourceGroups/NewsBoard/providers/microsoft.insights/components/NewsBoard-Insights",
      "type": "String"
    },
    "location": {
      "type": "string",
      "defaultValue": "eastus",
      "metadata": {
        "description": "Location for all resources."
      }
    }
  },
  "variables": {},
  "resources": [
    {
      "type": "Microsoft.Logic/workflows",
      "apiVersion": "2017-07-01",
      "name": "ViewInbox",
      "location": "[parameters('location')]",
      "properties": {
        "state": "Enabled",
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "actions": {
            "Initialize_Newsletter_JSON": {
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "list",
                    "type": "Object"
                  }
                ]
              },
              "runAfter": {}
            },
            "Initialize_Folder_JSON": {
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "folders",
                    "type": "Object"
                  }
                ]
              },
              "runAfter": {
                "Initialize_Newsletter_JSON": [
                  "Succeeded"
                ]
              }
            },
            "Verify_Member_Validity": {
              "type": "ApiConnection",
              "inputs": {
                "body": {
                  "id": "@triggerOutputs()['relativePathParameters']['azureID']"
                },
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['sql']['connectionId']"
                  }
                },
                "method": "post",
                "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent('default'))},@{encodeURIComponent(encodeURIComponent('default'))}/procedures/@{encodeURIComponent(encodeURIComponent('[dbo].[sp_member_check]'))}"
              },
              "runAfter": {
                "Initialize_Folder_JSON": [
                  "Succeeded"
                ]
              }
            },
            "Check_Member_State": {
              "type": "If",
              "actions": {
                "Retrieve_Metadata": {
                  "type": "ApiConnection",
                  "inputs": {
                    "body": {
                      "memberGUID": "@triggerOutputs()['relativePathParameters']['azureID']",
                      "folderGUID": "@triggerOutputs()['relativePathParameters']['folderGUID']",
                      "offset": "@triggerOutputs()['relativePathParameters']['offset']"
                    },
                    "host": {
                      "connection": {
                        "name": "@parameters('$connections')['sql']['connectionId']"
                      }
                    },
                    "method": "post",
                    "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent('default'))},@{encodeURIComponent(encodeURIComponent('default'))}/procedures/@{encodeURIComponent(encodeURIComponent('[dbo].[sp_newsletter_list]'))}"
                  },
                  "runAfter": {}
                },
                "Retrieve_Member_Folders": {
                  "type": "ApiConnection",
                  "inputs": {
                    "body": {
                      "memberGUID": "@triggerOutputs()['relativePathParameters']['azureID']"
                    },
                    "host": {
                      "connection": {
                        "name": "@parameters('$connections')['sql']['connectionId']"
                      }
                    },
                    "method": "post",
                    "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent('default'))},@{encodeURIComponent(encodeURIComponent('default'))}/procedures/@{encodeURIComponent(encodeURIComponent('[dbo].[sp_member_folder_list]'))}"
                  },
                  "runAfter": {
                    "Retrieve_Metadata": [
                      "Succeeded"
                    ]
                  }
                },
                "Check_Metadata_State": {
                  "type": "If",
                  "actions": {
                    "Compose_Newsletter_Rows": {
                      "type": "Compose",
                      "inputs": {
                        "data": "@body('Retrieve_Metadata')?['resultsets']?['Table1']",
                        "count": "@body('Retrieve_Metadata')?['outputparameters']?['resultCount']"
                      },
                      "runAfter": {}
                    },
                    "Set_Newsletter_Data_Full": {
                      "type": "SetVariable",
                      "inputs": {
                        "name": "list",
                        "value": "@outputs('Compose_Newsletter_Rows')"
                      },
                      "runAfter": {
                        "Compose_Newsletter_Rows": [
                          "Succeeded"
                        ]
                      }
                    }
                  },
                  "else": {
                    "actions": {
                      "Compose_Newsletter_Empty": {
                        "type": "Compose",
                        "inputs": {
                          "list": {
                            "data": "",
                            "count": 0
                          }
                        },
                        "runAfter": {}
                      },
                      "Set_Newsletter_Data_Empty": {
                        "type": "SetVariable",
                        "inputs": {
                          "name": "list",
                          "value": "@outputs('Compose_Newsletter_Empty')"
                        },
                        "runAfter": {
                          "Compose_Newsletter_Empty": [
                            "Succeeded"
                          ]
                        }
                      }
                    }
                  },
                  "expression": {
                    "and": [
                      {
                        "equals": [
                          "@body('Retrieve_Metadata')?['returncode']",
                          1
                        ]
                      }
                    ]
                  },
                  "runAfter": {
                    "Retrieve_Member_Folders": [
                      "Succeeded"
                    ]
                  }
                },
                "Check_Folders_State": {
                  "type": "If",
                  "actions": {
                    "Compose_Folder_Rows": {
                      "type": "Compose",
                      "inputs": {
                        "data": "@body('Retrieve_Member_Folders')?['resultsets']?['Table1']",
                        "count": "@body('Retrieve_Member_Folders')?['outputparameters']?['resultCount']"
                      },
                      "runAfter": {}
                    },
                    "Set_Folder_Data_Full": {
                      "type": "SetVariable",
                      "inputs": {
                        "name": "folders",
                        "value": "@outputs('Compose_Folder_Rows')"
                      },
                      "runAfter": {
                        "Compose_Folder_Rows": [
                          "Succeeded"
                        ]
                      }
                    }
                  },
                  "else": {
                    "actions": {
                      "Compose_Folders_Empty": {
                        "type": "Compose",
                        "inputs": {
                          "folders": {
                            "data": "",
                            "count": 0
                          }
                        },
                        "runAfter": {}
                      },
                      "Set_Folder_Data_Empty": {
                        "type": "SetVariable",
                        "inputs": {
                          "name": "folders",
                          "value": "@outputs('Compose_Folders_Empty')"
                        },
                        "runAfter": {
                          "Compose_Folders_Empty": [
                            "Succeeded"
                          ]
                        }
                      }
                    }
                  },
                  "expression": {
                    "and": [
                      {
                        "equals": [
                          "@body('Retrieve_Member_Folders')?['returncode']",
                          1
                        ]
                      }
                    ]
                  },
                  "runAfter": {
                    "Check_Metadata_State": [
                      "Succeeded"
                    ]
                  }
                },
                "Build_Return_Success": {
                  "type": "Compose",
                  "inputs": {
                    "data": {
                      "newsletters": "@variables('list')",
                      "folders": "@variables('folders')"
                    },
                    "error": "",
                    "success": true
                  },
                  "runAfter": {
                    "Check_Folders_State": [
                      "Succeeded"
                    ]
                  }
                },
                "Return_Success_To_API": {
                  "type": "Response",
                  "inputs": {
                    "body": "@outputs('Build_Return_Success')",
                    "headers": {
                      "content-type": "application/json"
                    },
                    "statusCode": 200
                  },
                  "kind": "Http",
                  "runAfter": {
                    "Build_Return_Success": [
                      "Succeeded"
                    ]
                  }
                }
              },
              "else": {
                "actions": {
                  "Build_Return_Failure": {
                    "type": "Compose",
                    "inputs": {
                      "data": {},
                      "error": "Invalid request. You may need to login first.",
                      "success": false
                    },
                    "runAfter": {}
                  },
                  "Return_Failure_To_API": {
                    "type": "Response",
                    "inputs": {
                      "body": "@outputs('Build_Return_Failure')",
                      "headers": {
                        "content-type": "application/json"
                      },
                      "statusCode": 401
                    },
                    "kind": "Http",
                    "runAfter": {
                      "Build_Return_Failure": [
                        "Succeeded"
                      ]
                    }
                  }
                }
              },
              "expression": {
                "and": [
                  {
                    "equals": [
                      "@body('Verify_Member_Validity')?['returncode']",
                      1
                    ]
                  }
                ]
              },
              "runAfter": {
                "Verify_Member_Validity": [
                  "Succeeded"
                ]
              }
            }
          },
          "outputs": {},
          "parameters": {
            "$connections": {
              "defaultValue": {},
              "type": "Object"
            }
          },
          "triggers": {
            "manual": {
              "type": "Request",
              "inputs": {
                "method": "GET",
                "relativePath": "/member/{azureID}/folder/{folderGUID}/page/{offset}",
                "schema": {}
              },
              "kind": "Http"
            }
          }
        },
        "parameters": {
          "$connections": {
            "value": {
              "sql": {
                "connectionId": "[parameters('connections_sql_1_externalid')]",
                "connectionName": "sql-1",
                "id": "/subscriptions/02b0bea5-460a-408e-b7ad-a8b7c69bc55a/providers/Microsoft.Web/locations/eastus/managedApis/sql"
              }
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Logic/workflows",
      "apiVersion": "2017-07-01",
      "name": "ViewMessage",
      "location": "[parameters('location')]",
      "properties": {
        "state": "Enabled",
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "actions": {
            "Initialize_Content_JSON": {
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "content",
                    "type": "Object"
                  }
                ]
              },
              "runAfter": {}
            },
            "Initialize_Author_JSON": {
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "author",
                    "type": "Object"
                  }
                ]
              },
              "runAfter": {
                "Initialize_Content_JSON": [
                  "Succeeded"
                ]
              }
            },
            "Initialize_Related_JSON": {
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "related",
                    "type": "Object"
                  }
                ]
              },
              "runAfter": {
                "Initialize_Author_JSON": [
                  "Succeeded"
                ]
              }
            },
            "Initialize_Notes_JSON": {
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "notes",
                    "type": "Object"
                  }
                ]
              },
              "runAfter": {
                "Initialize_Related_JSON": [
                  "Succeeded"
                ]
              }
            },
            "Verify_Member_Validity": {
              "type": "ApiConnection",
              "inputs": {
                "body": {
                  "id": "@triggerOutputs()['relativePathParameters']['azureID']"
                },
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['sql']['connectionId']"
                  }
                },
                "method": "post",
                "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent('default'))},@{encodeURIComponent(encodeURIComponent('default'))}/procedures/@{encodeURIComponent(encodeURIComponent('[dbo].[sp_member_check]'))}"
              },
              "runAfter": {
                "Initialize_Notes_JSON": [
                  "Succeeded"
                ]
              }
            },
            "Check_Member_State": {
              "type": "If",
              "actions": {
                "Retrieve_Metadata": {
                  "type": "ApiConnection",
                  "inputs": {
                    "body": {
                      "memberGUID": "@triggerOutputs()['relativePathParameters']['azureID']",
                      "newsletterGUID": "@triggerOutputs()['relativePathParameters']['newsletterGUID']"
                    },
                    "host": {
                      "connection": {
                        "name": "@parameters('$connections')['sql']['connectionId']"
                      }
                    },
                    "method": "post",
                    "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent('default'))},@{encodeURIComponent(encodeURIComponent('default'))}/procedures/@{encodeURIComponent(encodeURIComponent('[dbo].[sp_newsletter_read]'))}"
                  },
                  "runAfter": {}
                },
                "Check_Metadata_State": {
                  "type": "If",
                  "actions": {
                    "Retrieve_Author": {
                      "type": "ApiConnection",
                      "inputs": {
                        "body": {
                          "memberGUID": "@triggerOutputs()['relativePathParameters']['azureID']",
                          "newsletterGUID": "@triggerOutputs()['relativePathParameters']['newsletterGUID']"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['sql']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent('default'))},@{encodeURIComponent(encodeURIComponent('default'))}/procedures/@{encodeURIComponent(encodeURIComponent('[dbo].[sp_author_read]'))}"
                      },
                      "runAfter": {}
                    },
                    "Retrieve_Related": {
                      "type": "ApiConnection",
                      "inputs": {
                        "body": {
                          "memberGUID": "@triggerOutputs()['relativePathParameters']['azureID']",
                          "newsletterGUID": "@triggerOutputs()['relativePathParameters']['newsletterGUID']"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['sql']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent('default'))},@{encodeURIComponent(encodeURIComponent('default'))}/procedures/@{encodeURIComponent(encodeURIComponent('[dbo].[sp_related_read]'))}"
                      },
                      "runAfter": {
                        "Retrieve_Author": [
                          "Succeeded"
                        ]
                      }
                    },
                    "Retrieve_Notes": {
                      "type": "ApiConnection",
                      "inputs": {
                        "body": {
                          "memberGUID": "@triggerOutputs()['relativePathParameters']['azureID']",
                          "newsletterGUID": "@triggerOutputs()['relativePathParameters']['newsletterGUID']"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['sql']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent('default'))},@{encodeURIComponent(encodeURIComponent('default'))}/procedures/@{encodeURIComponent(encodeURIComponent('[dbo].[sp_annotations_read]'))}"
                      },
                      "runAfter": {
                        "Retrieve_Related": [
                          "Succeeded"
                        ]
                      }
                    },
                    "Retrieve_Newsletter_Content": {
                      "type": "ApiConnection",
                      "inputs": {
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azureblob']['connectionId']"
                          }
                        },
                        "method": "get",
                        "path": "/datasets/default/files/@{encodeURIComponent(encodeURIComponent(concat('/newsletters/', triggerOutputs()['relativePathParameters']['newsletterGUID'],'.html')))}/content",
                        "queries": {
                          "inferContentType": true
                        }
                      },
                      "runAfter": {
                        "Retrieve_Notes": [
                          "Succeeded"
                        ]
                      }
                    },
                    "Compose_Newsletter_Content": {
                      "type": "Compose",
                      "inputs": {
                        "content": {
                          "id": "@{first(body('Retrieve_Metadata')?['resultsets']?['Table1'])['id']}",
                          "sender": "@{first(body('Retrieve_Metadata')?['resultsets']?['Table1'])['sender']}",
                          "subject": "@{first(body('Retrieve_Metadata')?['resultsets']?['Table1'])['subject']}",
                          "newsletter": "@{base64(body('Retrieve_Newsletter_Content'))}"
                        }
                      },
                      "runAfter": {
                        "Retrieve_Newsletter_Content": [
                          "Succeeded"
                        ]
                      }
                    },
                    "Set_Newsletter_Data": {
                      "type": "SetVariable",
                      "inputs": {
                        "name": "content",
                        "value": "@outputs('Compose_Newsletter_Content')"
                      },
                      "runAfter": {
                        "Compose_Newsletter_Content": [
                          "Succeeded"
                        ]
                      }
                    },
                    "Check_Author_State": {
                      "type": "If",
                      "actions": {
                        "Compose_Author_Data": {
                          "type": "Compose",
                          "inputs": {
                            "author": "@{first(body('Retrieve_Author')?['resultsets']?['Table1'])['author']}"
                          },
                          "runAfter": {}
                        },
                        "Set_Author_Data_Full": {
                          "type": "SetVariable",
                          "inputs": {
                            "name": "author",
                            "value": "@outputs('Compose_Author_Data')"
                          },
                          "runAfter": {
                            "Compose_Author_Data": [
                              "Succeeded"
                            ]
                          }
                        }
                      },
                      "else": {
                        "actions": {
                          "Compose_Author_Empty": {
                            "type": "Compose",
                            "inputs": {
                              "author": "@{first(body('Retrieve_Metadata')?['resultsets']?['Table1'])['sender']}"
                            },
                            "runAfter": {}
                          },
                          "Set_Author_Data_Empty": {
                            "type": "SetVariable",
                            "inputs": {
                              "name": "author",
                              "value": "@outputs('Compose_Author_Empty')"
                            },
                            "runAfter": {
                              "Compose_Author_Empty": [
                                "Succeeded"
                              ]
                            }
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@body('Retrieve_Author')?['returncode']",
                              1
                            ]
                          }
                        ]
                      },
                      "runAfter": {
                        "Set_Newsletter_Data": [
                          "Succeeded"
                        ]
                      }
                    },
                    "Check_Related_State": {
                      "type": "If",
                      "actions": {
                        "Compose_Related_Rows": {
                          "type": "Compose",
                          "inputs": {
                            "related": "@body('Retrieve_Related')?['resultsets']?['Table1']"
                          },
                          "runAfter": {}
                        },
                        "Set_Related_Data_Full": {
                          "type": "SetVariable",
                          "inputs": {
                            "name": "related",
                            "value": "@outputs('Compose_Related_Rows')"
                          },
                          "runAfter": {
                            "Compose_Related_Rows": [
                              "Succeeded"
                            ]
                          }
                        }
                      },
                      "else": {
                        "actions": {
                          "Compose_Related_Empty": {
                            "type": "Compose",
                            "inputs": {
                              "related": {}
                            },
                            "runAfter": {}
                          },
                          "Set_Related_Data_Empty": {
                            "type": "SetVariable",
                            "inputs": {
                              "name": "related",
                              "value": "@outputs('Compose_Related_Empty')"
                            },
                            "runAfter": {
                              "Compose_Related_Empty": [
                                "Succeeded"
                              ]
                            }
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@body('Retrieve_Related')?['returncode']",
                              1
                            ]
                          }
                        ]
                      },
                      "runAfter": {
                        "Check_Author_State": [
                          "Succeeded"
                        ]
                      }
                    },
                    "Check_Notes_State": {
                      "type": "If",
                      "actions": {
                        "Compose_Notes_Rows": {
                          "type": "Compose",
                          "inputs": {
                            "notes": "@body('Retrieve_Notes')?['resultsets']?['Table1']"
                          },
                          "runAfter": {}
                        },
                        "Set_Notes_Data_Full": {
                          "type": "SetVariable",
                          "inputs": {
                            "name": "notes",
                            "value": "@outputs('Compose_Notes_Rows')"
                          },
                          "runAfter": {
                            "Compose_Notes_Rows": [
                              "Succeeded"
                            ]
                          }
                        }
                      },
                      "else": {
                        "actions": {
                          "Compose_Notes_Empty": {
                            "type": "Compose",
                            "inputs": {
                              "notes": {}
                            },
                            "runAfter": {}
                          },
                          "Set_Notes_Data_Empty": {
                            "type": "SetVariable",
                            "inputs": {
                              "name": "notes",
                              "value": "@outputs('Compose_Notes_Empty')"
                            },
                            "runAfter": {
                              "Compose_Notes_Empty": [
                                "Succeeded"
                              ]
                            }
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@body('Retrieve_Notes')?['returncode']",
                              1
                            ]
                          }
                        ]
                      },
                      "runAfter": {
                        "Check_Related_State": [
                          "Succeeded"
                        ]
                      }
                    },
                    "Build_Return_Success": {
                      "type": "Compose",
                      "inputs": {
                        "data": {
                          "content": "@variables('content')",
                          "author": "@variables('author')",
                          "related": "@variables('related')",
                          "notes": "@variables('notes')"
                        },
                        "error": "",
                        "success": true
                      },
                      "runAfter": {
                        "Check_Notes_State": [
                          "Succeeded"
                        ]
                      }
                    },
                    "Return_Success_To_API": {
                      "type": "Response",
                      "inputs": {
                        "body": "@outputs('Build_Return_Success')",
                        "headers": {
                          "content-type": "application/json"
                        },
                        "statusCode": 200
                      },
                      "kind": "Http",
                      "runAfter": {
                        "Build_Return_Success": [
                          "Succeeded"
                        ]
                      }
                    }
                  },
                  "else": {
                    "actions": {
                      "Build_Return_Failure_404": {
                        "type": "Compose",
                        "inputs": {
                          "data": {},
                          "error": "Invalid request. That message does not exist.",
                          "success": false
                        },
                        "runAfter": {}
                      },
                      "Return_Failure_To_API_404": {
                        "type": "Response",
                        "inputs": {
                          "body": "@outputs('Build_Return_Failure_404')",
                          "headers": {
                            "content-type": "application/json"
                          },
                          "statusCode": 404
                        },
                        "kind": "Http",
                        "runAfter": {
                          "Build_Return_Failure_404": [
                            "Succeeded"
                          ]
                        }
                      }
                    }
                  },
                  "expression": {
                    "and": [
                      {
                        "equals": [
                          "@body('Retrieve_Metadata')?['returncode']",
                          1
                        ]
                      }
                    ]
                  },
                  "runAfter": {
                    "Retrieve_Metadata": [
                      "Succeeded"
                    ]
                  }
                }
              },
              "else": {
                "actions": {
                  "Build_Return_Failure_401": {
                    "type": "Compose",
                    "inputs": {
                      "data": {},
                      "error": "Invalid request. You may need to login first.",
                      "success": false
                    },
                    "runAfter": {}
                  },
                  "Return_Failure_To_API_401": {
                    "type": "Response",
                    "inputs": {
                      "body": "@outputs('Build_Return_Failure_401')",
                      "headers": {
                        "content-type": "application/json"
                      },
                      "statusCode": 401
                    },
                    "kind": "Http",
                    "runAfter": {
                      "Build_Return_Failure_401": [
                        "Succeeded"
                      ]
                    }
                  }
                }
              },
              "expression": {
                "and": [
                  {
                    "equals": [
                      "@body('Verify_Member_Validity')?['returncode']",
                      1
                    ]
                  }
                ]
              },
              "runAfter": {
                "Verify_Member_Validity": [
                  "Succeeded"
                ]
              }
            }
          },
          "outputs": {},
          "parameters": {
            "$connections": {
              "defaultValue": {},
              "type": "Object"
            }
          },
          "triggers": {
            "manual": {
              "type": "Request",
              "inputs": {
                "method": "GET",
                "relativePath": "/member/{azureID}/message/{newsletterGUID}",
                "schema": {}
              },
              "kind": "Http"
            }
          }
        },
        "parameters": {
          "$connections": {
            "value": {
              "azureblob": {
                "connectionId": "[parameters('connections_azureblob_externalid')]",
                "connectionName": "azureblob",
                "id": "/subscriptions/02b0bea5-460a-408e-b7ad-a8b7c69bc55a/providers/Microsoft.Web/locations/eastus/managedApis/azureblob"
              },
              "sql": {
                "connectionId": "[parameters('connections_sql_1_externalid')]",
                "connectionName": "sql-1",
                "id": "/subscriptions/02b0bea5-460a-408e-b7ad-a8b7c69bc55a/providers/Microsoft.Web/locations/eastus/managedApis/sql"
              }
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Logic/workflows",
      "apiVersion": "2017-07-01",
      "name": "FolderList",
      "location": "[parameters('location')]",
      "properties": {
        "state": "Enabled",
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "actions": {
            "Retrieve_Member_Folders": {
              "type": "ApiConnection",
              "inputs": {
                "body": {
                  "memberGUID": "@triggerOutputs()['relativePathParameters']['azureID']"
                },
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['sql']['connectionId']"
                  }
                },
                "method": "post",
                "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent('default'))},@{encodeURIComponent(encodeURIComponent('default'))}/procedures/@{encodeURIComponent(encodeURIComponent('[dbo].[sp_member_folder_list]'))}"
              },
              "runAfter": {}
            },
            "Check_Request_Status": {
              "type": "If",
              "actions": {
                "Build_Return_Success": {
                  "type": "Compose",
                  "inputs": {
                    "data": {
                      "folders": {
                        "data": "@body('Retrieve_Member_Folders')?['resultsets']?['Table1']",
                        "count": "@body('Retrieve_Member_Folders')?['outputparameters']?['resultCount']"
                      }
                    },
                    "error": "",
                    "success": true
                  },
                  "runAfter": {}
                },
                "Return_Success_To_API": {
                  "type": "Response",
                  "inputs": {
                    "body": "@outputs('Build_Return_Success')",
                    "headers": {
                      "content-type": "application/json"
                    },
                    "statusCode": 200
                  },
                  "kind": "Http",
                  "runAfter": {
                    "Build_Return_Success": [
                      "Succeeded"
                    ]
                  }
                }
              },
              "else": {
                "actions": {
                  "Build_Return_Failure": {
                    "type": "Compose",
                    "inputs": {
                      "data": {},
                      "error": "Item Issue",
                      "success": false
                    },
                    "runAfter": {}
                  },
                  "Return_Failure_To_API": {
                    "type": "Response",
                    "inputs": {
                      "body": "@outputs('Build_Return_Failure')",
                      "headers": {
                        "content-type": "application/json"
                      },
                      "statusCode": 400
                    },
                    "kind": "Http",
                    "runAfter": {
                      "Build_Return_Failure": [
                        "Succeeded"
                      ]
                    }
                  }
                }
              },
              "expression": {
                "and": [
                  {
                    "equals": [
                      "@body('Retrieve_Member_Folders')?['returncode']",
                      1
                    ]
                  }
                ]
              },
              "runAfter": {
                "Retrieve_Member_Folders": [
                  "Succeeded"
                ]
              }
            }
          },
          "outputs": {},
          "parameters": {
            "$connections": {
              "defaultValue": {},
              "type": "Object"
            }
          },
          "triggers": {
            "manual": {
              "type": "Request",
              "inputs": {
                "method": "GET",
                "relativePath": "/member/{azureID}",
                "schema": {}
              },
              "kind": "Http"
            }
          }
        },
        "parameters": {
          "$connections": {
            "value": {
              "sql": {
                "connectionId": "[parameters('connections_sql_1_externalid')]",
                "connectionName": "sql-1",
                "id": "/subscriptions/02b0bea5-460a-408e-b7ad-a8b7c69bc55a/providers/Microsoft.Web/locations/eastus/managedApis/sql"
              }
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Logic/workflows",
      "apiVersion": "2017-07-01",
      "name": "FolderAdd",
      "location": "[parameters('location')]",
      "properties": {
        "state": "Enabled",
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "actions": {
            "Add_Member_Folder": {
              "type": "ApiConnection",
              "inputs": {
                "body": {
                  "memberGUID": "@triggerOutputs()['relativePathParameters']['azureID']",
                  "folderName": "@triggerBody()?['folderName']"
                },
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['sql']['connectionId']"
                  }
                },
                "method": "post",
                "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent('default'))},@{encodeURIComponent(encodeURIComponent('default'))}/procedures/@{encodeURIComponent(encodeURIComponent('[dbo].[sp_member_folder_add]'))}"
              },
              "runAfter": {}
            },
            "Check_Request_Status": {
              "type": "If",
              "actions": {
                "Build_Return_Success": {
                  "type": "Compose",
                  "inputs": {
                    "data": "",
                    "error": "",
                    "success": true
                  },
                  "runAfter": {}
                },
                "Return_Success_To_API": {
                  "type": "Response",
                  "inputs": {
                    "body": "@outputs('Build_Return_Success')",
                    "headers": {
                      "content-type": "application/json"
                    },
                    "statusCode": 200
                  },
                  "kind": "Http",
                  "runAfter": {
                    "Build_Return_Success": [
                      "Succeeded"
                    ]
                  }
                }
              },
              "else": {
                "actions": {
                  "Build_Return_Failure": {
                    "type": "Compose",
                    "inputs": {
                      "data": {},
                      "error": "Item Issue",
                      "success": false
                    },
                    "runAfter": {}
                  },
                  "Return_Failure_To_API": {
                    "type": "Response",
                    "inputs": {
                      "body": "@outputs('Build_Return_Failure')",
                      "headers": {
                        "content-type": "application/json"
                      },
                      "statusCode": 400
                    },
                    "kind": "Http",
                    "runAfter": {
                      "Build_Return_Failure": [
                        "Succeeded"
                      ]
                    }
                  }
                }
              },
              "expression": {
                "and": [
                  {
                    "equals": [
                      "@body('Add_Member_Folder')?['returncode']",
                      1
                    ]
                  }
                ]
              },
              "runAfter": {
                "Add_Member_Folder": [
                  "Succeeded"
                ]
              }
            }
          },
          "outputs": {},
          "parameters": {
            "$connections": {
              "defaultValue": {},
              "type": "Object"
            }
          },
          "triggers": {
            "manual": {
              "type": "Request",
              "inputs": {
                "method": "POST",
                "relativePath": "/member/{azureID}",
                "schema": {
                  "type": "object",
                  "properties": {
                    "folderName": {
                      "type": "string"
                    }
                  }
                }
              },
              "kind": "Http"
            }
          }
        },
        "parameters": {
          "$connections": {
            "value": {
              "sql": {
                "connectionId": "[parameters('connections_sql_1_externalid')]",
                "connectionName": "sql-1",
                "id": "/subscriptions/02b0bea5-460a-408e-b7ad-a8b7c69bc55a/providers/Microsoft.Web/locations/eastus/managedApis/sql"
              }
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Logic/workflows",
      "apiVersion": "2017-07-01",
      "name": "FolderDelete",
      "location": "[parameters('location')]",
      "properties": {
        "state": "Enabled",
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "actions": {
            "Delete_Member_Folder": {
              "type": "ApiConnection",
              "inputs": {
                "body": {
                  "memberGUID": "@triggerOutputs()['relativePathParameters']['azureID']",
                  "folderGUID": "@triggerOutputs()['relativePathParameters']['folderID']"
                },
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['sql']['connectionId']"
                  }
                },
                "method": "post",
                "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent('default'))},@{encodeURIComponent(encodeURIComponent('default'))}/procedures/@{encodeURIComponent(encodeURIComponent('[dbo].[sp_member_folder_delete]'))}"
              },
              "runAfter": {}
            },
            "Check_Delete_Status": {
              "type": "If",
              "actions": {
                "Build_Return_Success": {
                  "type": "Compose",
                  "inputs": {
                    "data": "",
                    "error": "",
                    "success": true
                  },
                  "runAfter": {}
                },
                "Return_Success_To_API": {
                  "type": "Response",
                  "inputs": {
                    "body": "@outputs('Build_Return_Success')",
                    "headers": {
                      "content-type": "application/json"
                    },
                    "statusCode": 200
                  },
                  "kind": "Http",
                  "runAfter": {
                    "Build_Return_Success": [
                      "Succeeded"
                    ]
                  }
                }
              },
              "else": {
                "actions": {
                  "Build_Return_Failure": {
                    "type": "Compose",
                    "inputs": {
                      "data": {},
                      "error": "Item Issue",
                      "success": false
                    },
                    "runAfter": {}
                  },
                  "Return_Failure_To_API": {
                    "type": "Response",
                    "inputs": {
                      "body": "@outputs('Build_Return_Failure')",
                      "headers": {
                        "content-type": "application/json"
                      },
                      "statusCode": 400
                    },
                    "kind": "Http",
                    "runAfter": {
                      "Build_Return_Failure": [
                        "Succeeded"
                      ]
                    }
                  }
                }
              },
              "expression": {
                "and": [
                  {
                    "equals": [
                      "@body('Delete_Member_Folder')?['returncode']",
                      1
                    ]
                  }
                ]
              },
              "runAfter": {
                "Delete_Member_Folder": [
                  "Succeeded"
                ]
              }
            }
          },
          "outputs": {},
          "parameters": {
            "$connections": {
              "defaultValue": {},
              "type": "Object"
            }
          },
          "triggers": {
            "manual": {
              "type": "Request",
              "inputs": {
                "method": "GET",
                "relativePath": "/member/{azureID}/folder/{folderID}",
                "schema": {}
              },
              "kind": "Http"
            }
          }
        },
        "parameters": {
          "$connections": {
            "value": {
              "azureblob": {
                "connectionId": "[parameters('connections_azureblob_externalid')]",
                "connectionName": "azureblob",
                "id": "/subscriptions/02b0bea5-460a-408e-b7ad-a8b7c69bc55a/providers/Microsoft.Web/locations/eastus/managedApis/azureblob"
              },
              "sql": {
                "connectionId": "[parameters('connections_sql_1_externalid')]",
                "connectionName": "sql-1",
                "id": "/subscriptions/02b0bea5-460a-408e-b7ad-a8b7c69bc55a/providers/Microsoft.Web/locations/eastus/managedApis/sql"
              }
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Logic/workflows",
      "apiVersion": "2017-07-01",
      "name": "NewsletterList",
      "location": "[parameters('location')]",
      "properties": {
        "state": "Enabled",
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "actions": {
            "Retrieve_Metadata": {
              "type": "ApiConnection",
              "inputs": {
                "body": {
                  "memberGUID": "@triggerOutputs()['relativePathParameters']['azureID']",
                  "folderGUID": "@triggerOutputs()['relativePathParameters']['folderGUID']",
                  "offset": "@triggerOutputs()['relativePathParameters']['offset']"
                },
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['sql']['connectionId']"
                  }
                },
                "method": "post",
                "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent('default'))},@{encodeURIComponent(encodeURIComponent('default'))}/procedures/@{encodeURIComponent(encodeURIComponent('[dbo].[sp_newsletter_list]'))}"
              },
              "runAfter": {}
            },
            "Check_Request_Status": {
              "type": "If",
              "actions": {
                "Build_Return_Success": {
                  "type": "Compose",
                  "inputs": {
                    "data": {
                      "newsletters": {
                        "data": "@body('Retrieve_Metadata')?['resultsets']?['Table1']",
                        "count": "@body('Retrieve_Metadata')?['outputparameters']?['resultCount']"
                      }
                    },
                    "error": "",
                    "success": true
                  },
                  "runAfter": {}
                },
                "Return_Success_To_API": {
                  "type": "Response",
                  "inputs": {
                    "body": "@outputs('Build_Return_Success')",
                    "headers": {
                      "content-type": "application/json"
                    },
                    "statusCode": 200
                  },
                  "kind": "Http",
                  "runAfter": {
                    "Build_Return_Success": [
                      "Succeeded"
                    ]
                  }
                }
              },
              "else": {
                "actions": {
                  "Build_Return_Failure": {
                    "type": "Compose",
                    "inputs": {
                      "data": {},
                      "error": "Item Issue",
                      "success": false
                    },
                    "runAfter": {}
                  },
                  "Return_Failure_To_API": {
                    "type": "Response",
                    "inputs": {
                      "body": "@outputs('Build_Return_Failure')",
                      "headers": {
                        "content-type": "application/json"
                      },
                      "statusCode": 400
                    },
                    "kind": "Http",
                    "runAfter": {
                      "Build_Return_Failure": [
                        "Succeeded"
                      ]
                    }
                  }
                }
              },
              "expression": {
                "and": [
                  {
                    "equals": [
                      "@body('Retrieve_Metadata')?['returncode']",
                      1
                    ]
                  }
                ]
              },
              "runAfter": {
                "Retrieve_Metadata": [
                  "Succeeded"
                ]
              }
            }
          },
          "outputs": {},
          "parameters": {
            "$connections": {
              "defaultValue": {},
              "type": "Object"
            }
          },
          "triggers": {
            "manual": {
              "type": "Request",
              "inputs": {
                "method": "GET",
                "relativePath": "/member/{azureID}/folder/{folderGUID}/page/{offset}",
                "schema": {}
              },
              "kind": "Http"
            }
          }
        },
        "parameters": {
          "$connections": {
            "value": {
              "sql": {
                "connectionId": "[parameters('connections_sql_1_externalid')]",
                "connectionName": "sql-1",
                "id": "/subscriptions/02b0bea5-460a-408e-b7ad-a8b7c69bc55a/providers/Microsoft.Web/locations/eastus/managedApis/sql"
              }
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Logic/workflows",
      "apiVersion": "2017-07-01",
      "name": "NewsletterItem",
      "location": "[parameters('location')]",
      "properties": {
        "state": "Enabled",
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "actions": {
            "Retrieve_Metadata": {
              "type": "ApiConnection",
              "inputs": {
                "body": {
                  "memberGUID": "@triggerOutputs()['relativePathParameters']['azureID']",
                  "newsletterGUID": "@triggerOutputs()['relativePathParameters']['newsletterGUID']"
                },
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['sql']['connectionId']"
                  }
                },
                "method": "post",
                "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent('default'))},@{encodeURIComponent(encodeURIComponent('default'))}/procedures/@{encodeURIComponent(encodeURIComponent('[dbo].[sp_newsletter_read]'))}"
              },
              "runAfter": {}
            },
            "Check_Request_Status": {
              "type": "If",
              "actions": {
                "Retrieve_Newsletter": {
                  "type": "ApiConnection",
                  "inputs": {
                    "host": {
                      "connection": {
                        "name": "@parameters('$connections')['azureblob']['connectionId']"
                      }
                    },
                    "method": "get",
                    "path": "/datasets/default/files/@{encodeURIComponent(encodeURIComponent(concat('/newsletters/', triggerOutputs()['relativePathParameters']['newsletterGUID'],'.html')))}/content",
                    "queries": {
                      "inferContentType": true
                    }
                  },
                  "runAfter": {}
                },
                "Build_Return_Success": {
                  "type": "Compose",
                  "inputs": {
                    "data": {
                      "id": "@{first(body('Retrieve_Metadata')?['resultsets']?['Table1'])['id']}",
                      "from": "@{first(body('Retrieve_Metadata')?['resultsets']?['Table1'])['sender']}",
                      "newsletter": "@{base64(body('Retrieve_Newsletter'))}",
                      "subject": "@{first(body('Retrieve_Metadata')?['resultsets']?['Table1'])['subject']}"
                    },
                    "error": "",
                    "success": true
                  },
                  "runAfter": {
                    "Retrieve_Newsletter": [
                      "Succeeded"
                    ]
                  }
                },
                "Return_Success_To_API": {
                  "type": "Response",
                  "inputs": {
                    "body": "@outputs('Build_Return_Success')",
                    "headers": {
                      "content-type": "application/json"
                    },
                    "statusCode": 200
                  },
                  "kind": "Http",
                  "runAfter": {
                    "Build_Return_Success": [
                      "Succeeded"
                    ]
                  }
                }
              },
              "else": {
                "actions": {
                  "Build_Return_Failure": {
                    "type": "Compose",
                    "inputs": {
                      "data": {},
                      "error": "Item Issue",
                      "success": false
                    },
                    "runAfter": {}
                  },
                  "Return_Failure_To_API": {
                    "type": "Response",
                    "inputs": {
                      "body": "@outputs('Build_Return_Failure')",
                      "headers": {
                        "content-type": "application/json"
                      },
                      "statusCode": 400
                    },
                    "kind": "Http",
                    "runAfter": {
                      "Build_Return_Failure": [
                        "Succeeded"
                      ]
                    }
                  }
                }
              },
              "expression": {
                "and": [
                  {
                    "equals": [
                      "@body('Retrieve_Metadata')?['returncode']",
                      1
                    ]
                  }
                ]
              },
              "runAfter": {
                "Retrieve_Metadata": [
                  "Succeeded"
                ]
              }
            }
          },
          "outputs": {},
          "parameters": {
            "$connections": {
              "defaultValue": {},
              "type": "Object"
            }
          },
          "triggers": {
            "manual": {
              "inputs": {
                "method": "GET",
                "relativePath": "/member/{azureID}/message/{newsletterGUID}",
                "schema": {}
              },
              "kind": "Http",
              "type": "Request"
            }
          }
        },
        "parameters": {
          "$connections": {
            "value": {
              "azureblob": {
                "connectionId": "[parameters('connections_azureblob_externalid')]",
                "connectionName": "azureblob",
                "id": "/subscriptions/02b0bea5-460a-408e-b7ad-a8b7c69bc55a/providers/Microsoft.Web/locations/eastus/managedApis/azureblob"
              },
              "sql": {
                "connectionId": "[parameters('connections_sql_1_externalid')]",
                "connectionName": "sql-1",
                "id": "/subscriptions/02b0bea5-460a-408e-b7ad-a8b7c69bc55a/providers/Microsoft.Web/locations/eastus/managedApis/sql"
              }
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Logic/workflows",
      "apiVersion": "2017-07-01",
      "name": "NewsletterAdd",
      "location": "[parameters('location')]",
      "properties": {
        "state": "Enabled",
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "actions": {
            "Add_File_Name_Variable": {
              "runAfter": {},
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "fileName",
                    "type": "string",
                    "value": "@{guid()}"
                  }
                ]
              }
            },
            "Add_HTML_Decoded": {
              "runAfter": {
                "Add_File_Name_Variable": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "decodedHTML",
                    "type": "string"
                  }
                ]
              }
            },
            "Check_Member_Name": {
              "runAfter": {
                "Parse_JSON": [
                  "Succeeded"
                ]
              },
              "type": "ApiConnection",
              "inputs": {
                "body": {
                  "to": "@{replace(body('Parse_JSON')?['To'],'@get.newsboard.email','')}"
                },
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['sql']['connectionId']"
                  }
                },
                "method": "post",
                "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent('default'))},@{encodeURIComponent(encodeURIComponent('default'))}/procedures/@{encodeURIComponent(encodeURIComponent('[dbo].[sp_member_check]'))}"
              }
            },
            "Parse_JSON": {
              "runAfter": {
                "Add_HTML_Decoded": [
                  "Succeeded"
                ]
              },
              "type": "ParseJson",
              "inputs": {
                "content": "@base64ToString(triggerBody()?['ContentData'])",
                "schema": {
                  "properties": {
                    "SenderName": {
                      "type": "string"
                    },
                    "SenderEmail": {
                      "type": "string"
                    },
                    "HTML": {
                      "type": "string"
                    },
                    "Subject": {
                      "type": "string"
                    },
                    "To": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "Route_Base_On_Return_Code": {
              "actions": {
                "Check_If_Contains_HTML": {
                  "actions": {
                    "Compose": {
                      "runAfter": {
                        "Set_Decoded_HTML": [
                          "Succeeded"
                        ]
                      },
                      "type": "Compose",
                      "inputs": "@variables('decodedHTML')"
                    },
                    "Create_blob": {
                      "runAfter": {
                        "Compose": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "body": "@outputs('Compose')",
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azureblob']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/datasets/default/files",
                        "queries": {
                          "folderPath": "/newsletters",
                          "name": "@{concat(variables('fileName'), '.html')}",
                          "queryParametersSingleEncoded": true
                        }
                      },
                      "runtimeConfiguration": {
                        "contentTransfer": {
                          "transferMode": "Chunked"
                        }
                      }
                    },
                    "Set_Decoded_HTML": {
                      "runAfter": {},
                      "type": "SetVariable",
                      "inputs": {
                        "name": "decodedHTML",
                        "value": "@{base64ToString(body('Parse_JSON')?['HTML'])}"
                      }
                    }
                  },
                  "runAfter": {},
                  "expression": {
                    "and": [
                      {
                        "greater": [
                          "@length(body('Parse_JSON')?['HTML'])",
                          0
                        ]
                      }
                    ]
                  },
                  "type": "If"
                },
                "Store_Newsletter": {
                  "runAfter": {
                    "Check_If_Contains_HTML": [
                      "Succeeded"
                    ]
                  },
                  "type": "ApiConnection",
                  "inputs": {
                    "body": {
                      "senderName": "@body('Parse_JSON')?['SenderName']",
                      "senderEmail": "@body('Parse_JSON')?['SenderEmail']",
                      "byline": "@triggerBody()?['Label']",
                      "htmlKey": "@variables('fileName')",
                      "subject": "@body('Parse_JSON')?['Subject']",
                      "tagline": "@triggerBody()?['Label']",
                      "to": "@{replace(body('Parse_JSON')?['To'],'@get.newsboard.email','')}"
                    },
                    "host": {
                      "connection": {
                        "name": "@parameters('$connections')['sql']['connectionId']"
                      }
                    },
                    "method": "post",
                    "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent('default'))},@{encodeURIComponent(encodeURIComponent('default'))}/procedures/@{encodeURIComponent(encodeURIComponent('[dbo].[sp_newsletter_add]'))}"
                  }
                }
              },
              "runAfter": {
                "Check_Member_Name": [
                  "Succeeded"
                ]
              },
              "expression": {
                "and": [
                  {
                    "equals": [
                      "@body('Check_Member_Name')?['returncode']",
                      1
                    ]
                  }
                ]
              },
              "type": "If"
            }
          },
          "outputs": {},
          "parameters": {
            "$connections": {
              "defaultValue": {},
              "type": "Object"
            }
          },
          "triggers": {
            "When_a_message_is_received_in_a_queue_(auto-complete)": {
              "recurrence": {
                "frequency": "Minute",
                "interval": 3
              },
              "type": "ApiConnection",
              "inputs": {
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['servicebus_1']['connectionId']"
                  }
                },
                "method": "get",
                "path": "/@{encodeURIComponent(encodeURIComponent('newslettersinbound'))}/messages/head",
                "queries": {
                  "queueType": "Main"
                }
              }
            }
          }
        },
        "parameters": {
          "$connections": {
            "value": {
              "azureblob": {
                "connectionId": "[parameters('connections_azureblob_externalid')]",
                "connectionName": "azureblob",
                "id": "/subscriptions/02b0bea5-460a-408e-b7ad-a8b7c69bc55a/providers/Microsoft.Web/locations/eastus/managedApis/azureblob"
              },
              "servicebus_1": {
                "connectionId": "[parameters('connections_servicebus_1_externalid')]",
                "connectionName": "servicebus-1",
                "id": "/subscriptions/02b0bea5-460a-408e-b7ad-a8b7c69bc55a/providers/Microsoft.Web/locations/eastus/managedApis/servicebus"
              },
              "sql": {
                "connectionId": "[parameters('connections_sql_1_externalid')]",
                "connectionName": "sql-1",
                "id": "/subscriptions/02b0bea5-460a-408e-b7ad-a8b7c69bc55a/providers/Microsoft.Web/locations/eastus/managedApis/sql"
              }
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Logic/workflows",
      "apiVersion": "2017-07-01",
      "name": "NewsletterUpdate",
      "location": "[parameters('location')]",
      "properties": {
        "state": "Enabled",
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "actions": {
            "Initialize_Response_Array": {
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "errors",
                    "type": "array"
                  }
                ]
              },
              "runAfter": {}
            },
            "For_Each_ID": {
              "type": "Foreach",
              "actions": {
                "Update_Newsletter_Metadata": {
                  "type": "ApiConnection",
                  "inputs": {
                    "body": {
                      "memberGUID": "@triggerOutputs()['relativePathParameters']['azureID']",
                      "newsletterGUID": "@items('For_Each_ID')",
                      "readState": "@if(equals(triggerOutputs()['relativePathParameters']['state'], 'read'), true, false)"
                    },
                    "host": {
                      "connection": {
                        "name": "@parameters('$connections')['sql']['connectionId']"
                      }
                    },
                    "method": "post",
                    "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent('default'))},@{encodeURIComponent(encodeURIComponent('default'))}/procedures/@{encodeURIComponent(encodeURIComponent('[dbo].[sp_newsletter_update]'))}"
                  },
                  "runAfter": {}
                },
                "Check_Move_Status": {
                  "type": "If",
                  "actions": {},
                  "else": {
                    "actions": {
                      "Add_Error_To_Collection": {
                        "type": "AppendToArrayVariable",
                        "inputs": {
                          "name": "errors",
                          "value": "concat('Could not update item: ',@items('For_Each_ID'))"
                        },
                        "runAfter": {}
                      }
                    }
                  },
                  "expression": {
                    "and": [
                      {
                        "equals": [
                          "@body('Update_Newsletter_Metadata')?['returncode']",
                          1
                        ]
                      }
                    ]
                  },
                  "runAfter": {
                    "Update_Newsletter_Metadata": [
                      "Succeeded"
                    ]
                  }
                }
              },
              "foreach": "@triggerBody()?['newsletterID']",
              "runAfter": {
                "Initialize_Response_Array": [
                  "Succeeded"
                ]
              }
            },
            "Check_Error_Status": {
              "type": "If",
              "actions": {
                "Build_Return_Success": {
                  "type": "Compose",
                  "inputs": {
                    "data": "",
                    "error": "",
                    "success": true
                  },
                  "runAfter": {}
                },
                "Return_Success_To_API": {
                  "type": "Response",
                  "inputs": {
                    "body": "@outputs('Build_Return_Success')",
                    "headers": {
                      "content-type": "application/json"
                    },
                    "statusCode": 200
                  },
                  "kind": "Http",
                  "runAfter": {
                    "Build_Return_Success": [
                      "Succeeded"
                    ]
                  }
                }
              },
              "else": {
                "actions": {
                  "Build_Return_Failure": {
                    "type": "Compose",
                    "inputs": {
                      "data": "@variables('errors')",
                      "error": "An error occurred during the request.",
                      "success": false
                    },
                    "runAfter": {}
                  },
                  "Return_Failure_To_API": {
                    "type": "Response",
                    "inputs": {
                      "body": "@outputs('Build_Return_Failure')",
                      "headers": {
                        "content-type": "application/json"
                      },
                      "statusCode": 400
                    },
                    "kind": "Http",
                    "runAfter": {
                      "Build_Return_Failure": [
                        "Succeeded"
                      ]
                    }
                  }
                }
              },
              "expression": {
                "and": [
                  {
                    "equals": [
                      "@length(variables('errors'))",
                      0
                    ]
                  }
                ]
              },
              "runAfter": {
                "For_Each_ID": [
                  "Succeeded"
                ]
              }
            }
          },
          "outputs": {},
          "parameters": {
            "$connections": {
              "defaultValue": {},
              "type": "Object"
            }
          },
          "triggers": {
            "manual": {
              "type": "Request",
              "inputs": {
                "method": "POST",
                "relativePath": "/member/{azureID}/state/{state}",
                "schema": {
                  "type": "object",
                  "properties": {
                    "newsletterID": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "kind": "Http"
            }
          }
        },
        "parameters": {
          "$connections": {
            "value": {
              "sql": {
                "connectionId": "[parameters('connections_sql_1_externalid')]",
                "connectionName": "sql-1",
                "id": "/subscriptions/02b0bea5-460a-408e-b7ad-a8b7c69bc55a/providers/Microsoft.Web/locations/eastus/managedApis/sql"
              }
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Logic/workflows",
      "apiVersion": "2017-07-01",
      "name": "NewsletterDelete",
      "location": "[parameters('location')]",
      "properties": {
        "state": "Enabled",
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "actions": {
            "Initialize_Response_Array": {
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "errors",
                    "type": "array"
                  }
                ]
              },
              "runAfter": {}
            },
            "For_Each_ID": {
              "type": "Foreach",
              "actions": {
                "Delete_Newsletter_Metadata": {
                  "type": "ApiConnection",
                  "inputs": {
                    "body": {
                      "memberGUID": "@triggerOutputs()['relativePathParameters']['azureID']",
                      "newsletterGUID": "@items('For_Each_ID')"
                    },
                    "host": {
                      "connection": {
                        "name": "@parameters('$connections')['sql']['connectionId']"
                      }
                    },
                    "method": "post",
                    "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent('default'))},@{encodeURIComponent(encodeURIComponent('default'))}/procedures/@{encodeURIComponent(encodeURIComponent('[dbo].[sp_newsletter_delete]'))}"
                  },
                  "runAfter": {}
                },
                "Check_Delete_Status": {
                  "type": "If",
                  "actions": {
                    "Delete_Newsletter_HTML": {
                      "type": "ApiConnection",
                      "inputs": {
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azureblob']['connectionId']"
                          }
                        },
                        "method": "delete",
                        "path": "/datasets/default/files/@{encodeURIComponent(encodeURIComponent(concat('/newsletters/',items('For_Each_ID'),'.html')))}"
                      },
                      "runAfter": {}
                    }
                  },
                  "else": {
                    "actions": {
                      "Add_Error_To_Collection": {
                        "type": "AppendToArrayVariable",
                        "inputs": {
                          "name": "errors",
                          "value": "concat('Could not delete item: ',@items('For_Each_ID'))"
                        },
                        "runAfter": {}
                      }
                    }
                  },
                  "expression": {
                    "and": [
                      {
                        "equals": [
                          "@body('Delete_Newsletter_Metadata')?['returncode']",
                          1
                        ]
                      }
                    ]
                  },
                  "runAfter": {
                    "Delete_Newsletter_Metadata": [
                      "Succeeded"
                    ]
                  }
                }
              },
              "foreach": "@triggerBody()?['newsletterID']",
              "runAfter": {
                "Initialize_Response_Array": [
                  "Succeeded"
                ]
              }
            },
            "Check_Error_Status": {
              "type": "If",
              "actions": {
                "Build_Return_Success": {
                  "type": "Compose",
                  "inputs": {
                    "data": "",
                    "error": "",
                    "success": true
                  },
                  "runAfter": {}
                },
                "Return_Success_To_API": {
                  "type": "Response",
                  "inputs": {
                    "body": "@outputs('Build_Return_Success')",
                    "headers": {
                      "content-type": "application/json"
                    },
                    "statusCode": 200
                  },
                  "kind": "Http",
                  "runAfter": {
                    "Build_Return_Success": [
                      "Succeeded"
                    ]
                  }
                }
              },
              "else": {
                "actions": {
                  "Build_Return_Failure": {
                    "type": "Compose",
                    "inputs": {
                      "data": "@variables('errors')",
                      "error": "An error occurred during the request.",
                      "success": false
                    },
                    "runAfter": {}
                  },
                  "Return_Failure_To_API": {
                    "type": "Response",
                    "inputs": {
                      "body": "@outputs('Build_Return_Failure')",
                      "headers": {
                        "content-type": "application/json"
                      },
                      "statusCode": 400
                    },
                    "kind": "Http",
                    "runAfter": {
                      "Build_Return_Failure": [
                        "Succeeded"
                      ]
                    }
                  }
                }
              },
              "expression": {
                "and": [
                  {
                    "equals": [
                      "@length(variables('errors'))",
                      0
                    ]
                  }
                ]
              },
              "runAfter": {
                "For_Each_ID": [
                  "Succeeded"
                ]
              }
            }
          },
          "outputs": {},
          "parameters": {
            "$connections": {
              "defaultValue": {},
              "type": "Object"
            }
          },
          "triggers": {
            "manual": {
              "type": "Request",
              "inputs": {
                "method": "POST",
                "relativePath": "/member/{azureID}",
                "schema": {
                  "type": "object",
                  "properties": {
                    "newsletterID": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "kind": "Http"
            }
          }
        },
        "parameters": {
          "$connections": {
            "value": {
              "azureblob": {
                "connectionId": "[parameters('connections_azureblob_externalid')]",
                "connectionName": "azureblob",
                "id": "/subscriptions/02b0bea5-460a-408e-b7ad-a8b7c69bc55a/providers/Microsoft.Web/locations/eastus/managedApis/azureblob"
              },
              "sql": {
                "connectionId": "[parameters('connections_sql_1_externalid')]",
                "connectionName": "sql-1",
                "id": "/subscriptions/02b0bea5-460a-408e-b7ad-a8b7c69bc55a/providers/Microsoft.Web/locations/eastus/managedApis/sql"
              }
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Logic/workflows",
      "apiVersion": "2017-07-01",
      "name": "NewsletterMove",
      "location": "[parameters('location')]",
      "properties": {
        "state": "Enabled",
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "actions": {
            "Initialize_Response_Array": {
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "errors",
                    "type": "array"
                  }
                ]
              },
              "runAfter": {}
            },
            "For_Each_ID": {
              "type": "Foreach",
              "actions": {
                "Move_Newsletter_Metadata": {
                  "type": "ApiConnection",
                  "inputs": {
                    "body": {
                      "memberGUID": "@triggerOutputs()['relativePathParameters']['azureID']",
                      "folderGUID": "@triggerOutputs()['relativePathParameters']['folderGUID']",
                      "newsletterGUID": "@items('For_Each_ID')"
                    },
                    "host": {
                      "connection": {
                        "name": "@parameters('$connections')['sql']['connectionId']"
                      }
                    },
                    "method": "post",
                    "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent('default'))},@{encodeURIComponent(encodeURIComponent('default'))}/procedures/@{encodeURIComponent(encodeURIComponent('[dbo].[sp_newsletter_move]'))}"
                  },
                  "runAfter": {}
                },
                "Check_Move_Status": {
                  "type": "If",
                  "actions": {},
                  "else": {
                    "actions": {
                      "Add_Error_To_Collection": {
                        "type": "AppendToArrayVariable",
                        "inputs": {
                          "name": "errors",
                          "value": "concat('Could not move item: ',@items('For_Each_ID'))"
                        },
                        "runAfter": {}
                      }
                    }
                  },
                  "expression": {
                    "and": [
                      {
                        "equals": [
                          "@body('Move_Newsletter_Metadata')?['returncode']",
                          1
                        ]
                      }
                    ]
                  },
                  "runAfter": {
                    "Move_Newsletter_Metadata": [
                      "Succeeded"
                    ]
                  }
                }
              },
              "foreach": "@triggerBody()?['newsletterID']",
              "runAfter": {
                "Initialize_Response_Array": [
                  "Succeeded"
                ]
              }
            },
            "Check_Error_Status": {
              "type": "If",
              "actions": {
                "Build_Return_Success": {
                  "type": "Compose",
                  "inputs": {
                    "data": "",
                    "error": "",
                    "success": true
                  },
                  "runAfter": {}
                },
                "Return_Success_To_API": {
                  "type": "Response",
                  "inputs": {
                    "body": "@outputs('Build_Return_Success')",
                    "headers": {
                      "content-type": "application/json"
                    },
                    "statusCode": 200
                  },
                  "kind": "Http",
                  "runAfter": {
                    "Build_Return_Success": [
                      "Succeeded"
                    ]
                  }
                }
              },
              "else": {
                "actions": {
                  "Build_Return_Failure": {
                    "type": "Compose",
                    "inputs": {
                      "data": "@variables('errors')",
                      "error": "An error occurred during the request.",
                      "success": false
                    },
                    "runAfter": {}
                  },
                  "Return_Failure_To_API": {
                    "type": "Response",
                    "inputs": {
                      "body": "@outputs('Build_Return_Failure')",
                      "headers": {
                        "content-type": "application/json"
                      },
                      "statusCode": 400
                    },
                    "kind": "Http",
                    "runAfter": {
                      "Build_Return_Failure": [
                        "Succeeded"
                      ]
                    }
                  }
                }
              },
              "expression": {
                "and": [
                  {
                    "equals": [
                      "@length(variables('errors'))",
                      0
                    ]
                  }
                ]
              },
              "runAfter": {
                "For_Each_ID": [
                  "Succeeded"
                ]
              }
            }
          },
          "outputs": {},
          "parameters": {
            "$connections": {
              "defaultValue": {},
              "type": "Object"
            }
          },
          "triggers": {
            "manual": {
              "type": "Request",
              "inputs": {
                "method": "POST",
                "relativePath": "/member/{azureID}/folder/{folderGUID}",
                "schema": {
                  "type": "object",
                  "properties": {
                    "newsletterID": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "kind": "Http"
            }
          }
        },
        "parameters": {
          "$connections": {
            "value": {
              "sql": {
                "connectionId": "[parameters('connections_sql_1_externalid')]",
                "connectionName": "sql-1",
                "id": "/subscriptions/02b0bea5-460a-408e-b7ad-a8b7c69bc55a/providers/Microsoft.Web/locations/eastus/managedApis/sql"
              }
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Logic/workflows",
      "apiVersion": "2017-07-01",
      "name": "NewsletterFavorite",
      "location": "[parameters('location')]",
      "properties": {
        "state": "Enabled",
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "actions": {
            "Udpate_Newsletter_Metadata": {
              "type": "ApiConnection",
              "inputs": {
                "body": {
                  "memberGUID": "@triggerOutputs()['relativePathParameters']['azureID']",
                  "newsletterGUID": "@triggerOutputs()['relativePathParameters']['newsletterGUID']"
                },
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['sql']['connectionId']"
                  }
                },
                "method": "post",
                "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent('default'))},@{encodeURIComponent(encodeURIComponent('default'))}/procedures/@{encodeURIComponent(encodeURIComponent('[dbo].[sp_newsletter_favorite]'))}"
              },
              "runAfter": {}
            },
            "Check_Request_Status": {
              "type": "If",
              "actions": {
                "Build_Return_Success": {
                  "type": "Compose",
                  "inputs": {
                    "data": "",
                    "error": "",
                    "success": true
                  },
                  "runAfter": {}
                },
                "Return_Success_To_API": {
                  "type": "Response",
                  "inputs": {
                    "body": "@outputs('Build_Return_Success')",
                    "headers": {
                      "content-type": "application/json"
                    },
                    "statusCode": 200
                  },
                  "kind": "Http",
                  "runAfter": {
                    "Build_Return_Success": [
                      "Succeeded"
                    ]
                  }
                }
              },
              "else": {
                "actions": {
                  "Build_Return_Failure": {
                    "type": "Compose",
                    "inputs": {
                      "data": {},
                      "error": "Item Issue",
                      "success": false
                    },
                    "runAfter": {}
                  },
                  "Return_Failure_To_API": {
                    "type": "Response",
                    "inputs": {
                      "body": "@outputs('Build_Return_Failure')",
                      "headers": {
                        "content-type": "application/json"
                      },
                      "statusCode": 400
                    },
                    "kind": "Http",
                    "runAfter": {
                      "Build_Return_Failure": [
                        "Succeeded"
                      ]
                    }
                  }
                }
              },
              "expression": {
                "and": [
                  {
                    "equals": [
                      "@body('Udpate_Newsletter_Metadata')?['returncode']",
                      1
                    ]
                  }
                ]
              },
              "runAfter": {
                "Udpate_Newsletter_Metadata": [
                  "Succeeded"
                ]
              }
            }
          },
          "outputs": {},
          "parameters": {
            "$connections": {
              "defaultValue": {},
              "type": "Object"
            }
          },
          "triggers": {
            "manual": {
              "type": "Request",
              "inputs": {
                "method": "GET",
                "relativePath": "/member/{azureID}/message/{newsletterGUID}",
                "schema": {}
              },
              "kind": "Http"
            }
          }
        },
        "parameters": {
          "$connections": {
            "value": {
              "sql": {
                "connectionId": "[parameters('connections_sql_1_externalid')]",
                "connectionName": "sql-1",
                "id": "/subscriptions/02b0bea5-460a-408e-b7ad-a8b7c69bc55a/providers/Microsoft.Web/locations/eastus/managedApis/sql"
              }
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Logic/workflows",
      "apiVersion": "2017-07-01",
      "name": "MemberCheck",
      "location": "[parameters('location')]",
      "properties": {
        "state": "Enabled",
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "actions": {
            "Fetch_Name_Availability": {
              "type": "ApiConnection",
              "inputs": {
                "body": {
                  "to": "@triggerOutputs()['relativePathParameters']['requested']"
                },
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['sql']['connectionId']"
                  }
                },
                "method": "post",
                "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent('default'))},@{encodeURIComponent(encodeURIComponent('default'))}/procedures/@{encodeURIComponent(encodeURIComponent('[dbo].[sp_member_check]'))}"
              },
              "runAfter": {}
            },
            "Check_If_Name_Exists": {
              "type": "If",
              "actions": {
                "Build_Return_Success": {
                  "type": "Compose",
                  "inputs": {
                    "data": {},
                    "error": "",
                    "success": true
                  },
                  "runAfter": {}
                },
                "Return_Success_To_API": {
                  "type": "Response",
                  "inputs": {
                    "body": "@outputs('Build_Return_Success')",
                    "headers": {
                      "content-type": "application/json"
                    },
                    "statusCode": 200
                  },
                  "kind": "Http",
                  "runAfter": {
                    "Build_Return_Success": [
                      "Succeeded"
                    ]
                  }
                }
              },
              "else": {
                "actions": {
                  "Build_Return_Failure": {
                    "type": "Compose",
                    "inputs": {
                      "data": {},
                      "error": "",
                      "success": false
                    },
                    "runAfter": {}
                  },
                  "Return_Failure_To_API": {
                    "type": "Response",
                    "inputs": {
                      "body": "@outputs('Build_Return_Failure')",
                      "headers": {
                        "content-type": "application/json"
                      },
                      "statusCode": 200
                    },
                    "kind": "Http",
                    "runAfter": {
                      "Build_Return_Failure": [
                        "Succeeded"
                      ]
                    }
                  }
                }
              },
              "expression": {
                "and": [
                  {
                    "equals": [
                      "@body('Fetch_Name_Availability')?['returncode']",
                      0
                    ]
                  }
                ]
              },
              "runAfter": {
                "Fetch_Name_Availability": [
                  "Succeeded"
                ]
              }
            }
          },
          "outputs": {},
          "parameters": {
            "$connections": {
              "defaultValue": {},
              "type": "Object"
            }
          },
          "triggers": {
            "manual": {
              "type": "Request",
              "inputs": {
                "method": "GET",
                "relativePath": "/requested/{requested}",
                "schema": {}
              },
              "kind": "Http"
            }
          }
        },
        "parameters": {
          "$connections": {
            "value": {
              "sql": {
                "connectionId": "[parameters('connections_sql_1_externalid')]",
                "connectionName": "sql-1",
                "id": "/subscriptions/02b0bea5-460a-408e-b7ad-a8b7c69bc55a/providers/Microsoft.Web/locations/eastus/managedApis/sql"
              }
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Logic/workflows",
      "apiVersion": "2017-07-01",
      "name": "MemberAdd",
      "location": "[parameters('location')]",
      "properties": {
        "state": "Enabled",
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "actions": {
            "Add_Member_Account": {
              "type": "ApiConnection",
              "inputs": {
                "body": {
                  "azureID": "@triggerOutputs()['relativePathParameters']['azureID']",
                  "localEmail": "@triggerBody()?['localEmail']",
                  "remoteEmail": "@triggerBody()?['remoteEmail']",
                  "givenName": "@triggerBody()?['givenName']",
                  "surName": "@triggerBody()?['surName']"
                },
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['sql']['connectionId']"
                  }
                },
                "method": "post",
                "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent('default'))},@{encodeURIComponent(encodeURIComponent('default'))}/procedures/@{encodeURIComponent(encodeURIComponent('[dbo].[sp_member_add]'))}"
              },
              "runAfter": {}
            },
            "Check_Return_State": {
              "type": "If",
              "actions": {
                "Build_Return_Success": {
                  "type": "Compose",
                  "inputs": {
                    "data": {},
                    "error": "",
                    "success": true
                  },
                  "runAfter": {}
                },
                "Return_Success_To_API": {
                  "type": "Response",
                  "inputs": {
                    "body": "@outputs('Build_Return_Success')",
                    "headers": {
                      "content-type": "application/json"
                    },
                    "statusCode": 200
                  },
                  "kind": "Http",
                  "runAfter": {
                    "Build_Return_Success": [
                      "Succeeded"
                    ]
                  }
                }
              },
              "else": {
                "actions": {
                  "Build_Return_Failure": {
                    "type": "Compose",
                    "inputs": {
                      "data": {},
                      "error": "",
                      "success": false
                    },
                    "runAfter": {}
                  },
                  "Return_Failure_To_API": {
                    "type": "Response",
                    "inputs": {
                      "body": "@outputs('Build_Return_Failure')",
                      "headers": {
                        "content-type": "application/json"
                      },
                      "statusCode": 200
                    },
                    "kind": "Http",
                    "runAfter": {
                      "Build_Return_Failure": [
                        "Succeeded"
                      ]
                    }
                  }
                }
              },
              "expression": {
                "and": [
                  {
                    "equals": [
                      "@body('Add_Member_Account')?['returncode']",
                      1
                    ]
                  }
                ]
              },
              "runAfter": {
                "Add_Member_Account": [
                  "Succeeded"
                ]
              }
            }
          },
          "outputs": {},
          "parameters": {
            "$connections": {
              "defaultValue": {},
              "type": "Object"
            }
          },
          "triggers": {
            "manual": {
              "type": "Request",
              "inputs": {
                "method": "POST",
                "relativePath": "/member/{azureID}",
                "schema": {
                  "type": "object",
                  "properties": {
                    "localEmail": {
                      "type": "string"
                    },
                    "remoteEmail": {
                      "type": "string"
                    },
                    "givenName": {
                      "type": "string"
                    },
                    "surName": {
                      "type": "string"
                    }
                  }
                }
              },
              "kind": "Http"
            }
          }
        },
        "parameters": {
          "$connections": {
            "value": {
              "sql": {
                "connectionId": "[parameters('connections_sql_1_externalid')]",
                "connectionName": "sql-1",
                "id": "/subscriptions/02b0bea5-460a-408e-b7ad-a8b7c69bc55a/providers/Microsoft.Web/locations/eastus/managedApis/sql"
              }
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Logic/workflows",
      "apiVersion": "2017-07-01",
      "name": "MemberUpdate",
      "location": "[parameters('location')]",
      "properties": {
        "state": "Enabled",
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "actions": {
            "Update_Member_Account": {
              "type": "ApiConnection",
              "inputs": {
                "body": {
                  "azureID": "@triggerOutputs()['relativePathParameters']['azureID']",
                  "givenName": "@triggerBody()?['givenName']",
                  "surName": "@triggerBody()?['surName']"
                },
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['sql']['connectionId']"
                  }
                },
                "method": "post",
                "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent('default'))},@{encodeURIComponent(encodeURIComponent('default'))}/procedures/@{encodeURIComponent(encodeURIComponent('[dbo].[sp_member_edit]'))}"
              },
              "runAfter": {}
            },
            "Check_Return_State": {
              "type": "If",
              "actions": {
                "Build_Return_Success": {
                  "type": "Compose",
                  "inputs": {
                    "data": {},
                    "error": "",
                    "success": true
                  },
                  "runAfter": {}
                },
                "Return_Success_To_API": {
                  "type": "Response",
                  "inputs": {
                    "body": "@outputs('Build_Return_Success')",
                    "headers": {
                      "content-type": "application/json"
                    },
                    "statusCode": 200
                  },
                  "kind": "Http",
                  "runAfter": {
                    "Build_Return_Success": [
                      "Succeeded"
                    ]
                  }
                }
              },
              "else": {
                "actions": {
                  "Build_Return_Failure": {
                    "type": "Compose",
                    "inputs": {
                      "data": {},
                      "error": "",
                      "success": false
                    },
                    "runAfter": {}
                  },
                  "Return_Failure_To_API": {
                    "type": "Response",
                    "inputs": {
                      "body": "@outputs('Build_Return_Failure')",
                      "headers": {
                        "content-type": "application/json"
                      },
                      "statusCode": 200
                    },
                    "kind": "Http",
                    "runAfter": {
                      "Build_Return_Failure": [
                        "Succeeded"
                      ]
                    }
                  }
                }
              },
              "expression": {
                "and": [
                  {
                    "equals": [
                      "@body('Update_Member_Account')?['returncode']",
                      1
                    ]
                  }
                ]
              },
              "runAfter": {
                "Update_Member_Account": [
                  "Succeeded"
                ]
              }
            }
          },
          "outputs": {},
          "parameters": {
            "$connections": {
              "defaultValue": {},
              "type": "Object"
            }
          },
          "triggers": {
            "manual": {
              "type": "Request",
              "inputs": {
                "method": "POST",
                "relativePath": "/member/{azureID}",
                "schema": {
                  "type": "object",
                  "properties": {
                    "givenName": {
                      "type": "string"
                    },
                    "surName": {
                      "type": "string"
                    }
                  }
                }
              },
              "kind": "Http"
            }
          }
        },
        "parameters": {
          "$connections": {
            "value": {
              "sql": {
                "connectionId": "[parameters('connections_sql_1_externalid')]",
                "connectionName": "sql-1",
                "id": "/subscriptions/02b0bea5-460a-408e-b7ad-a8b7c69bc55a/providers/Microsoft.Web/locations/eastus/managedApis/sql"
              }
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Logic/workflows",
      "apiVersion": "2017-07-01",
      "name": "AnnotationsList",
      "location": "[parameters('location')]",
      "properties": {
        "state": "Enabled",
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "actions": {
            "Retrieve_Annotations": {
              "type": "ApiConnection",
              "inputs": {
                "body": {
                  "memberGUID": "@triggerOutputs()['relativePathParameters']['azureID']",
                  "newsletterGUID": "@triggerOutputs()['relativePathParameters']['newsletterGUID']"
                },
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['sql']['connectionId']"
                  }
                },
                "method": "post",
                "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent('default'))},@{encodeURIComponent(encodeURIComponent('default'))}/procedures/@{encodeURIComponent(encodeURIComponent('[dbo].[sp_annotations_read]'))}"
              },
              "runAfter": {}
            },
            "Check_Request_Status": {
              "type": "If",
              "actions": {
                "Build_Return_Success": {
                  "type": "Compose",
                  "inputs": {
                    "data": {
                      "annotations": "@body('Retrieve_Annotations')?['resultsets']?['Table1']"
                    },
                    "error": "",
                    "success": true
                  },
                  "runAfter": {}
                },
                "Return_Success_To_API": {
                  "type": "Response",
                  "inputs": {
                    "body": "@outputs('Build_Return_Success')",
                    "headers": {
                      "content-type": "application/json"
                    },
                    "statusCode": 200
                  },
                  "kind": "Http",
                  "runAfter": {
                    "Build_Return_Success": [
                      "Succeeded"
                    ]
                  }
                }
              },
              "else": {
                "actions": {
                  "Build_Return_Failure": {
                    "type": "Compose",
                    "inputs": {
                      "data": {},
                      "error": "Item Issue",
                      "success": false
                    },
                    "runAfter": {}
                  },
                  "Return_Failure_To_API": {
                    "type": "Response",
                    "inputs": {
                      "body": "@outputs('Build_Return_Failure')",
                      "headers": {
                        "content-type": "application/json"
                      },
                      "statusCode": 400
                    },
                    "kind": "Http",
                    "runAfter": {
                      "Build_Return_Failure": [
                        "Succeeded"
                      ]
                    }
                  }
                }
              },
              "expression": {
                "and": [
                  {
                    "equals": [
                      "@body('Retrieve_Annotations')?['returncode']",
                      1
                    ]
                  }
                ]
              },
              "runAfter": {
                "Retrieve_Annotations": [
                  "Succeeded"
                ]
              }
            }
          },
          "outputs": {},
          "parameters": {
            "$connections": {
              "defaultValue": {},
              "type": "Object"
            }
          },
          "triggers": {
            "manual": {
              "inputs": {
                "method": "GET",
                "relativePath": "/member/{azureID}/message/{newsletterGUID}",
                "schema": {}
              },
              "kind": "Http",
              "type": "Request"
            }
          }
        },
        "parameters": {
          "$connections": {
            "value": {
              "sql": {
                "connectionId": "[parameters('connections_sql_1_externalid')]",
                "connectionName": "sql-1",
                "id": "/subscriptions/02b0bea5-460a-408e-b7ad-a8b7c69bc55a/providers/Microsoft.Web/locations/eastus/managedApis/sql"
              }
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Logic/workflows",
      "apiVersion": "2017-07-01",
      "name": "AnnotationsAdd",
      "location": "[parameters('location')]",
      "properties": {
        "state": "Enabled",
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "actions": {
            "Add_Annotation": {
              "type": "ApiConnection",
              "inputs": {
                "body": {
                  "memberGUID": "@triggerOutputs()['relativePathParameters']['azureID']",
                  "newsletterGUID": "@triggerOutputs()['relativePathParameters']['newsletterGUID']",
                  "annotation": "@triggerBody()?['note']"
                },
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['sql']['connectionId']"
                  }
                },
                "method": "post",
                "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent('default'))},@{encodeURIComponent(encodeURIComponent('default'))}/procedures/@{encodeURIComponent(encodeURIComponent('[dbo].[sp_annotations_add]'))}"
              },
              "runAfter": {}
            },
            "Check_Request_Status": {
              "type": "If",
              "actions": {
                "Build_Return_Success": {
                  "type": "Compose",
                  "inputs": {
                    "data": "",
                    "error": "",
                    "success": true
                  },
                  "runAfter": {}
                },
                "Return_Success_To_API": {
                  "type": "Response",
                  "inputs": {
                    "body": "@outputs('Build_Return_Success')",
                    "headers": {
                      "content-type": "application/json"
                    },
                    "statusCode": 200
                  },
                  "kind": "Http",
                  "runAfter": {
                    "Build_Return_Success": [
                      "Succeeded"
                    ]
                  }
                }
              },
              "else": {
                "actions": {
                  "Build_Return_Failure": {
                    "type": "Compose",
                    "inputs": {
                      "data": {},
                      "error": "Item Issue",
                      "success": false
                    },
                    "runAfter": {}
                  },
                  "Return_Failure_To_API": {
                    "type": "Response",
                    "inputs": {
                      "body": "@outputs('Build_Return_Failure')",
                      "headers": {
                        "content-type": "application/json"
                      },
                      "statusCode": 400
                    },
                    "kind": "Http",
                    "runAfter": {
                      "Build_Return_Failure": [
                        "Succeeded"
                      ]
                    }
                  }
                }
              },
              "expression": {
                "and": [
                  {
                    "equals": [
                      "@body('Add_Annotation')?['returncode']",
                      1
                    ]
                  }
                ]
              },
              "runAfter": {
                "Add_Annotation": [
                  "Succeeded"
                ]
              }
            }
          },
          "outputs": {},
          "parameters": {
            "$connections": {
              "defaultValue": {},
              "type": "Object"
            }
          },
          "triggers": {
            "manual": {
              "type": "Request",
              "inputs": {
                "method": "POST",
                "relativePath": "/member/{azureID}/message/{newsletterGUID}",
                "schema": {
                  "type": "object",
                  "properties": {
                    "note": {
                      "type": "string"
                    }
                  }
                }
              },
              "kind": "Http"
            }
          }
        },
        "parameters": {
          "$connections": {
            "value": {
              "sql": {
                "connectionId": "[parameters('connections_sql_1_externalid')]",
                "connectionName": "sql-1",
                "id": "/subscriptions/02b0bea5-460a-408e-b7ad-a8b7c69bc55a/providers/Microsoft.Web/locations/eastus/managedApis/sql"
              }
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Logic/workflows",
      "apiVersion": "2017-07-01",
      "name": "AnnotationsUpdate",
      "location": "[parameters('location')]",
      "properties": {
        "state": "Enabled",
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "actions": {
            "Update_Annotation": {
              "type": "ApiConnection",
              "inputs": {
                "body": {
                  "memberGUID": "@triggerOutputs()['relativePathParameters']['azureID']",
                  "newsletterGUID": "@triggerOutputs()['relativePathParameters']['newsletterGUID']",
                  "annotationGUID": "@triggerOutputs()['relativePathParameters']['annotationGUID']",
                  "annotation": "@triggerBody()?['note']"
                },
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['sql']['connectionId']"
                  }
                },
                "method": "post",
                "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent('default'))},@{encodeURIComponent(encodeURIComponent('default'))}/procedures/@{encodeURIComponent(encodeURIComponent('[dbo].[sp_annotations_update]'))}"
              },
              "runAfter": {}
            },
            "Check_Request_Status": {
              "type": "If",
              "actions": {
                "Build_Return_Success": {
                  "type": "Compose",
                  "inputs": {
                    "data": "",
                    "error": "",
                    "success": true
                  },
                  "runAfter": {}
                },
                "Return_Success_To_API": {
                  "type": "Response",
                  "inputs": {
                    "body": "@outputs('Build_Return_Success')",
                    "headers": {
                      "content-type": "application/json"
                    },
                    "statusCode": 200
                  },
                  "kind": "Http",
                  "runAfter": {
                    "Build_Return_Success": [
                      "Succeeded"
                    ]
                  }
                }
              },
              "else": {
                "actions": {
                  "Build_Return_Failure": {
                    "type": "Compose",
                    "inputs": {
                      "data": {},
                      "error": "Item Issue",
                      "success": false
                    },
                    "runAfter": {}
                  },
                  "Return_Failure_To_API": {
                    "type": "Response",
                    "inputs": {
                      "body": "@outputs('Build_Return_Failure')",
                      "headers": {
                        "content-type": "application/json"
                      },
                      "statusCode": 400
                    },
                    "kind": "Http",
                    "runAfter": {
                      "Build_Return_Failure": [
                        "Succeeded"
                      ]
                    }
                  }
                }
              },
              "expression": {
                "and": [
                  {
                    "equals": [
                      "@body('Update_Annotation')?['returncode']",
                      1
                    ]
                  }
                ]
              },
              "runAfter": {
                "Update_Annotation": [
                  "Succeeded"
                ]
              }
            }
          },
          "outputs": {},
          "parameters": {
            "$connections": {
              "defaultValue": {},
              "type": "Object"
            }
          },
          "triggers": {
            "manual": {
              "type": "Request",
              "inputs": {
                "method": "POST",
                "relativePath": "/member/{azureID}/message/{newsletterGUID}/note/{annotationGUID}",
                "schema": {
                  "type": "object",
                  "properties": {
                    "note": {
                      "type": "string"
                    }
                  }
                }
              },
              "kind": "Http"
            }
          }
        },
        "parameters": {
          "$connections": {
            "value": {
              "sql": {
                "connectionId": "[parameters('connections_sql_1_externalid')]",
                "connectionName": "sql-1",
                "id": "/subscriptions/02b0bea5-460a-408e-b7ad-a8b7c69bc55a/providers/Microsoft.Web/locations/eastus/managedApis/sql"
              }
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Logic/workflows",
      "apiVersion": "2017-07-01",
      "name": "AnnotationsDelete",
      "location": "[parameters('location')]",
      "properties": {
        "state": "Enabled",
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "actions": {
            "Delete_Annotations": {
              "type": "ApiConnection",
              "inputs": {
                "body": {
                  "memberGUID": "@triggerOutputs()['relativePathParameters']['azureID']",
                  "newsletterGUID": "@triggerOutputs()['relativePathParameters']['newsletterGUID']",
                  "annotationGUID": "@triggerOutputs()['relativePathParameters']['annotationGUID']"
                },
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['sql']['connectionId']"
                  }
                },
                "method": "post",
                "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent('default'))},@{encodeURIComponent(encodeURIComponent('default'))}/procedures/@{encodeURIComponent(encodeURIComponent('[dbo].[sp_annotations_delete]'))}"
              },
              "runAfter": {}
            },
            "Check_Request_Status": {
              "type": "If",
              "actions": {
                "Build_Return_Success": {
                  "type": "Compose",
                  "inputs": {
                    "data": {},
                    "error": "",
                    "success": true
                  },
                  "runAfter": {}
                },
                "Return_Success_To_API": {
                  "type": "Response",
                  "inputs": {
                    "body": "@outputs('Build_Return_Success')",
                    "headers": {
                      "content-type": "application/json"
                    },
                    "statusCode": 200
                  },
                  "kind": "Http",
                  "runAfter": {
                    "Build_Return_Success": [
                      "Succeeded"
                    ]
                  }
                }
              },
              "else": {
                "actions": {
                  "Build_Return_Failure": {
                    "type": "Compose",
                    "inputs": {
                      "data": {},
                      "error": "Item Issue",
                      "success": false
                    },
                    "runAfter": {}
                  },
                  "Return_Failure_To_API": {
                    "type": "Response",
                    "inputs": {
                      "body": "@outputs('Build_Return_Failure')",
                      "headers": {
                        "content-type": "application/json"
                      },
                      "statusCode": 400
                    },
                    "kind": "Http",
                    "runAfter": {
                      "Build_Return_Failure": [
                        "Succeeded"
                      ]
                    }
                  }
                }
              },
              "expression": {
                "and": [
                  {
                    "equals": [
                      "@body('Delete_Annotations')?['returncode']",
                      1
                    ]
                  }
                ]
              },
              "runAfter": {
                "Delete_Annotations": [
                  "Succeeded"
                ]
              }
            }
          },
          "outputs": {},
          "parameters": {
            "$connections": {
              "defaultValue": {},
              "type": "Object"
            }
          },
          "triggers": {
            "manual": {
              "inputs": {
                "method": "GET",
                "relativePath": "/member/{azureID}/message/{newsletterGUID}/note/{annotationGUID}",
                "schema": {}
              },
              "kind": "Http",
              "type": "Request"
            }
          }
        },
        "parameters": {
          "$connections": {
            "value": {
              "azureblob": {
                "connectionId": "[parameters('connections_azureblob_externalid')]",
                "connectionName": "azureblob",
                "id": "/subscriptions/02b0bea5-460a-408e-b7ad-a8b7c69bc55a/providers/Microsoft.Web/locations/eastus/managedApis/azureblob"
              },
              "sql": {
                "connectionId": "[parameters('connections_sql_1_externalid')]",
                "connectionName": "sql-1",
                "id": "/subscriptions/02b0bea5-460a-408e-b7ad-a8b7c69bc55a/providers/Microsoft.Web/locations/eastus/managedApis/sql"
              }
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.ApiManagement/service",
      "apiVersion": "2019-12-01-preview",
      "name": "[parameters('service_NewsBoard_Insights_name')]",
      "location": "West US",
      "sku": {
        "name": "Developer",
        "capacity": 1
      },
      "identity": {
        "principalId": "41c2f5e0-233d-4d9f-89ba-7b95d31f1e40",
        "tenantId": "5ee35505-eb8e-4929-937d-645df5013288",
        "type": "SystemAssigned"
      },
      "properties": {
        "publisherEmail": "gerwin@email.arizona.edu",
        "publisherName": "UA NewsBoard CS536 Sethi",
        "notificationSenderEmail": "apimgmt-noreply@mail.windowsazure.com",
        "hostnameConfigurations": [
          {
            "type": "Proxy",
            "hostName": "newsboard-insights.azure-api.net",
            "negotiateClientCertificate": false,
            "defaultSslBinding": false
          },
          {
            "type": "Proxy",
            "hostName": "api.newsboard.email",
            "keyVaultId": "https://newsboardvault.vault.azure.net/secrets/SSL-API",
            "negotiateClientCertificate": false,
            "certificate": {
              "expiry": "2022-03-05T23:59:59+00:00",
              "thumbprint": "2B69DE040C7FAEBADEBBE6EDAB430E59BD0BA6D8",
              "subject": "CN=api.newsboard.email"
            },
            "defaultSslBinding": true
          }
        ],
        "customProperties": {
          "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TripleDes168": "false",
          "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls11": "false",
          "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls10": "false",
          "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Ssl30": "false",
          "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls11": "false",
          "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls10": "false",
          "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Ssl30": "false",
          "Microsoft.WindowsAzure.ApiManagement.Gateway.Protocols.Server.Http2": "false"
        },
        "virtualNetworkType": "None",
        "disableGateway": false,
        "apiVersionConstraint": {}
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/policies",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/policy')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "value": "<policies>\r\n  <inbound>\r\n    <cors allow-credentials=\"true\">\r\n      <allowed-origins>\r\n        <origin>https://newsboard-insights.developer.azure-api.net</origin>\r\n        <origin>https://api.newsboard.email</origin>\r\n        <origin>https://www.newboard.email</origin>\r\n        <origin>https://newsboard.email</origin>\r\n        <origin>https://netboard.b2clogin.com</origin>\r\n      </allowed-origins>\r\n      <allowed-methods preflight-result-max-age=\"300\">\r\n        <method>GET</method>\r\n        <method>POST</method>\r\n        <method>PUT</method>\r\n        <method>DELETE</method>\r\n      </allowed-methods>\r\n      <allowed-headers>\r\n        <header>*</header>\r\n      </allowed-headers>\r\n      <expose-headers>\r\n        <header>*</header>\r\n      </expose-headers>\r\n    </cors>\r\n    <set-variable name=\"azureID\" value=\"@(context.Request.Headers.GetValueOrDefault(&quot;azureID&quot;,&quot;&quot;))\" />\r\n  </inbound>\r\n  <backend>\r\n    <forward-request />\r\n  </backend>\r\n  <outbound />\r\n  <on-error />\r\n</policies>",
        "format": "xml"
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/backends",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/newsboard-parser')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "description": "newsboard-parser",
        "url": "https://newsboard-parser.azurewebsites.net/api/parser",
        "protocol": "http",
        "resourceId": "https://management.azure.com/subscriptions/02b0bea5-460a-408e-b7ad-a8b7c69bc55a/resourceGroups/NewsBoard/providers/Microsoft.Web/sites/newsboard-parser",
        "credentials": {
          "header": {
            "x-functions-key": [
              "{{NewsboardParserKey}}"
            ]
          }
        }
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/backends",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/LayoutInbox')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "description": "Get Inbox Content",
        "url": "https://prod-31.eastus.logic.azure.com/workflows/3a25c83554c44b4fa060e542276bac9f/triggers",
        "protocol": "http",
        "resourceId": "https://management.azure.com/subscriptions/02b0bea5-460a-408e-b7ad-a8b7c69bc55a/resourceGroups/NewsBoard/providers/Microsoft.Logic/workflows/NewsletterList"
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/backends",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/LayoutMessage')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "description": "Get Message Content",
        "url": "https://prod-47.eastus.logic.azure.com/workflows/bddc0290638e4c30a89e90dc13b744a6/triggers",
        "protocol": "http",
        "resourceId": "https://management.azure.com/subscriptions/02b0bea5-460a-408e-b7ad-a8b7c69bc55a/resourceGroups/NewsBoard/providers/Microsoft.Logic/workflows/NewsletterItem"
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/backends",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/ListMessage')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "description": "List Messages (Refresh Version)",
        "url": "https://prod-00.eastus.logic.azure.com/workflows/81d0b262639b40b6a00606109fb5559f/triggers",
        "protocol": "http",
        "resourceId": "https://management.azure.com/subscriptions/02b0bea5-460a-408e-b7ad-a8b7c69bc55a/resourceGroups/NewsBoard/providers/Microsoft.Logic/workflows/NewsletterList"
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/backends",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/ViewMessage')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "description": "Get Message Content",
        "url": "https://prod-02.eastus.logic.azure.com/workflows/edfb90c4321d4b9097aed5db76067ec2/triggers",
        "protocol": "http",
        "resourceId": "https://management.azure.com/subscriptions/02b0bea5-460a-408e-b7ad-a8b7c69bc55a/resourceGroups/NewsBoard/providers/Microsoft.Logic/workflows/NewsletterItem"
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/backends",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/UpdateMessage')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "description": "Update Message State",
        "url": "https://prod-92.eastus.logic.azure.com/workflows/ecdd49fbca9741939075495d08628bd8/triggers",
        "protocol": "http",
        "resourceId": "https://management.azure.com/subscriptions/02b0bea5-460a-408e-b7ad-a8b7c69bc55a/resourceGroups/NewsBoard/providers/Microsoft.Logic/workflows/NewsletterUpdate"
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/backends",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/DeleteMessage')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "description": "Delete Message",
        "url": "https://prod-13.eastus.logic.azure.com/workflows/3a9ce33020a4467ea5c5a62a3c9cc1c2/triggers",
        "protocol": "http",
        "resourceId": "https://management.azure.com/subscriptions/02b0bea5-460a-408e-b7ad-a8b7c69bc55a/resourceGroups/NewsBoard/providers/Microsoft.Logic/workflows/NewsletterDelete"
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/backends",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/MoveMessage')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "description": "Move Message(s)",
        "url": "https://prod-22.eastus.logic.azure.com/workflows/7da7646b1ab047b4a8927e4d73e45dc0/triggers",
        "protocol": "http",
        "resourceId": "https://management.azure.com/subscriptions/02b0bea5-460a-408e-b7ad-a8b7c69bc55a/resourceGroups/NewsBoard/providers/Microsoft.Logic/workflows/NewsletterMove"
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/backends",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/FavoriteMessage')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "description": "Favorite Message",
        "url": "https://prod-25.eastus.logic.azure.com/workflows/808a1155645345e59cc9752b71428429/triggers",
        "protocol": "http",
        "resourceId": "https://management.azure.com/subscriptions/02b0bea5-460a-408e-b7ad-a8b7c69bc55a/resourceGroups/NewsBoard/providers/Microsoft.Logic/workflows/NewsletterFavorite"
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/backends",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/ListFolder')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "description": "View Member Defined Folders List",
        "url": "https://prod-88.eastus.logic.azure.com/workflows/fc182b926d244e62a5747dc4e271ba1b/triggers",
        "protocol": "http",
        "resourceId": "https://management.azure.com/subscriptions/02b0bea5-460a-408e-b7ad-a8b7c69bc55a/resourceGroups/NewsBoard/providers/Microsoft.Logic/workflows/FolderList"
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/backends",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/AddFolder')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "description": "Add Member Defined Folder",
        "url": "https://prod-45.eastus.logic.azure.com/workflows/16c599c7ef8b4563a07717c5b60268c7/triggers",
        "protocol": "http",
        "resourceId": "https://management.azure.com/subscriptions/02b0bea5-460a-408e-b7ad-a8b7c69bc55a/resourceGroups/NewsBoard/providers/Microsoft.Logic/workflows/FolderAdd"
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/backends",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/DeleteFolder')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "description": "Delete Member Defined Folder",
        "url": "https://prod-01.eastus.logic.azure.com/workflows/0734325e97d64a72ab455d4ecf374fd0/triggers",
        "protocol": "http",
        "resourceId": "https://management.azure.com/subscriptions/02b0bea5-460a-408e-b7ad-a8b7c69bc55a/resourceGroups/NewsBoard/providers/Microsoft.Logic/workflows/FolderDelete"
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/backends",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/CheckMember')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "description": "Check Member Name Not In Use",
        "url": "https://prod-50.eastus.logic.azure.com/workflows/fce5cb05c4de4221983f3ce357a67d46/triggers",
        "protocol": "http",
        "resourceId": "https://management.azure.com/subscriptions/02b0bea5-460a-408e-b7ad-a8b7c69bc55a/resourceGroups/NewsBoard/providers/Microsoft.Logic/workflows/MemberCheck"
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/backends",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/AddMember')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "description": "Add Member Account",
        "url": "https://prod-61.eastus.logic.azure.com/workflows/89f2676f0a094c72b96c3f4ccc6db83b/triggers",
        "protocol": "http",
        "resourceId": "https://management.azure.com/subscriptions/02b0bea5-460a-408e-b7ad-a8b7c69bc55a/resourceGroups/NewsBoard/providers/Microsoft.Logic/workflows/MemberAdd"
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/backends",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/UpdateMember')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "description": "Update Member Account",
        "url": "https://prod-17.eastus.logic.azure.com/workflows/2470d6b98e2940b7a20e924ea22d895a/triggers",
        "protocol": "http",
        "resourceId": "https://management.azure.com/subscriptions/02b0bea5-460a-408e-b7ad-a8b7c69bc55a/resourceGroups/NewsBoard/providers/Microsoft.Logic/workflows/MemberUpdate"
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/backends",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/ReadAnnotations')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "description": "Read Annotations",
        "url": "https://prod-08.eastus.logic.azure.com/workflows/774f47a601624f5f83f137ac76836011/triggers",
        "protocol": "http",
        "resourceId": "https://management.azure.com/subscriptions/02b0bea5-460a-408e-b7ad-a8b7c69bc55a/resourceGroups/NewsBoard/providers/Microsoft.Logic/workflows/AnnotationsList"
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/backends",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/AddAnnotations')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "description": "Add Annotations",
        "url": "https://prod-36.eastus.logic.azure.com/workflows/0b7ef883515c4875a5e50030e683c643/triggers",
        "protocol": "http",
        "resourceId": "https://management.azure.com/subscriptions/02b0bea5-460a-408e-b7ad-a8b7c69bc55a/resourceGroups/NewsBoard/providers/Microsoft.Logic/workflows/AnnotationsAdd"
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/backends",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/UpdateAnnotations')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "description": "Update Annotations",
        "url": "https://prod-85.eastus.logic.azure.com/workflows/2beeece8cb2c4221b26fad120f9749c5/triggers",
        "protocol": "http",
        "resourceId": "https://management.azure.com/subscriptions/02b0bea5-460a-408e-b7ad-a8b7c69bc55a/resourceGroups/NewsBoard/providers/Microsoft.Logic/workflows/AnnotationsUpdate"
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/backends",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/DeleteAnnotations')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "description": "Delete Annotations",
        "url": "https://prod-04.eastus.logic.azure.com/workflows/3bf57a14fc21487387b38b667e8ffff6/triggers",
        "protocol": "http",
        "resourceId": "https://management.azure.com/subscriptions/02b0bea5-460a-408e-b7ad-a8b7c69bc55a/resourceGroups/NewsBoard/providers/Microsoft.Logic/workflows/AnnotationsDelete"
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/namedValues",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/ViewInboxKey')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "displayName": "ViewInboxKey",
        "tags": [
          "key",
          "logicapp",
          "inbox"
        ],
        "value": "Gt3kHUZ3EnqJuB4jbsEAuojTwTdp9OiiCJkJWhQQqOU",
        "secret": true
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/namedValues",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/ViewMessageKey')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "displayName": "ViewMessageKey",
        "tags": [
          "key",
          "logicapp",
          "message"
        ],
        "value": "DTUQafqCxJiBpQpIXWQZNsErA7bWBZsoMzkpXeJfaJM",
        "secret": true
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/namedValues",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/MemberCheckKey')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "displayName": "MemberCheckKey",
        "tags": [
          "key",
          "logicapp",
          "check",
          "member"
        ],
        "value": "VXGOVgBJe4yDb0t2TJGmfAFsmqxLuuxkHQyNKvcYOWA",
        "secret": true
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/namedValues",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/MemberAddKey')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "displayName": "MemberAddKey",
        "tags": [
          "key",
          "logicapp",
          "add",
          "member"
        ],
        "value": "SnV4EGtJBnmp7WcK3xeK9TGI5KkQlj4n-MFkoPlt7Es",
        "secret": true
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/namedValues",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/MemberUpdateKey')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "displayName": "MemberUpdateKey",
        "tags": [
          "key",
          "logicapp",
          "update",
          "member"
        ],
        "value": "2LdAtjsi9lQzKzEJeEr7hAjKwZIkVkqXDLxDX4qp79g",
        "secret": true
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/namedValues",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/FolderListKey')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "displayName": "FolderListKey",
        "tags": [
          "key",
          "logicapp",
          "list",
          "folder"
        ],
        "value": "4YnLRsbuu8oD34OiKS8MtCErP7PK0P6aXhUMIFnU3As",
        "secret": true
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/namedValues",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/FolderAddKey')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "displayName": "FolderAddKey",
        "tags": [
          "key",
          "logicapp",
          "add",
          "folder"
        ],
        "value": "LV4TyIfoiZXpx6sV_iXmuiry3Inwocr5E1r7RmtFueg",
        "secret": true
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/namedValues",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/FolderDeleteKey')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "displayName": "FolderDeleteKey",
        "tags": [
          "key",
          "logicapp",
          "delete",
          "folder"
        ],
        "value": "Zz6mMpxeY4sMV8nl5J3lpxPTiScm3j8PiJeZx6Y7Y1g",
        "secret": true
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/namedValues",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/NewsletterListKey')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "displayName": "NewsletterListKey",
        "tags": [
          "key",
          "logicapp",
          "list",
          "newsletter"
        ],
        "value": "ifOghTPUm5b5Nbm8y6SkjzOJBuw2sqD9auKercs--PQ",
        "secret": true
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/namedValues",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/NewsletterItemKey')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "displayName": "NewsletterItemKey",
        "tags": [
          "key",
          "logicapp",
          "item",
          "newsletter"
        ],
        "value": "J_T9y1L03vWf3XwWgvltjH_mamk0COQBDaxo6h6Wtm4",
        "secret": true
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/namedValues",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/NewsletterAddKey')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "displayName": "NewsletterAddKey",
        "tags": [
          "key",
          "logicapp",
          "add",
          "newsletter"
        ],
        "value": "n",
        "secret": true
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/namedValues",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/NewsletterUpdateKey')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "displayName": "NewsletterUpdateKey",
        "tags": [
          "key",
          "logicapp",
          "update",
          "newsletter"
        ],
        "value": "B0_YlBsfG7Om36GQ9ewmAC1Q9wQjoVfaj2CJLl4plu8",
        "secret": true
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/namedValues",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/NewsletterDeleteKey')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "displayName": "NewsletterDeleteKey",
        "tags": [
          "key",
          "logicapp",
          "delete",
          "newsletter"
        ],
        "value": "B6DrR2BZoNoMfgpaMSutb2BEK6FD6bFHvW_GgIU9jeM",
        "secret": true
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/namedValues",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/NewsletterMoveKey')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "displayName": "NewsletterMoveKey",
        "tags": [
          "key",
          "logicapp",
          "move",
          "newsletter"
        ],
        "value": "3PGIE1i12IEF34FhA3oqkouehPJySAzvQzjhtnK9M24",
        "secret": true
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/namedValues",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/NewsletterFavoriteKey')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "displayName": "NewsletterFavoriteKey",
        "tags": [
          "key",
          "logicapp",
          "favorite",
          "newsletter"
        ],
        "value": "sd0TWlmDbdLu14Ju4WTKSbm7_WjIV6r_hLYtN5JCGvQ",
        "secret": true
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/namedValues",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/AnnotationsReadKey')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "displayName": "AnnotationsReadKey",
        "tags": [
          "key",
          "logicapp",
          "read",
          "annotations"
        ],
        "value": "tjvj5F7qDtgIXRZUtIb6Kw2fvYd-RK0r4tbuQRQFM2g",
        "secret": true
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/namedValues",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/AnnotationsAddKey')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "displayName": "AnnotationsAddKey",
        "tags": [
          "key",
          "logicapp",
          "add",
          "annotations"
        ],
        "value": "OEBY1qZej-hTPTreXpKj8oEo7_g3FkKIHWm9ZQx0gFs",
        "secret": true
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/namedValues",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/AnnotationsUpdateKey')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "displayName": "AnnotationsUpdateKey",
        "tags": [
          "key",
          "logicapp",
          "update",
          "annotations"
        ],
        "value": "Rxa5JTkKhgMHMQBj-eTIbHEUGdZoTRfQJNCky17Jj1Q",
        "secret": true
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/namedValues",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/AnnotationsDeleteKey')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "displayName": "AnnotationsDeleteKey",
        "tags": [
          "key",
          "logicapp",
          "delete",
          "annotations"
        ],
        "value": "xbf2L8__OBpyACDzVA_bHS5A7C8_ScxMocZ0Crx5k1Q",
        "secret": true
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/namedValues",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/NewsboardParserKey')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "displayName": "NewsboardParserKey",
        "tags": [
          "key",
          "function",
          "auto"
        ],
        "value": "bmkJhmttT7EUEJeIHlClOC5CNlLPH+EvIPZ6iC4GhjcZrHdJ2IridA==",
        "secret": true
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/namedValues",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/ApplicationInsightsKey')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "displayName": "ApplicationInsightsKey",
        "value": "0fd15c57-48b6-421e-a09e-fa4224bbf9d9",
        "secret": true
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/apis",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/inbox')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "displayName": "Inbox",
        "apiRevision": "1",
        "description": "User Inbox",
        "subscriptionRequired": false,
        "path": "inbox",
        "protocols": [
          "https"
        ],
        "isCurrent": true
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/apis/operations",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/inbox/layout')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service/apis', parameters('service_NewsBoard_Insights_name'), 'inbox')]",
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "displayName": "Get Inbox Layout",
        "description": "Get Main Layout",
        "method": "GET",
        "urlTemplate": "/{folderGUID}/{page}",
        "templateParameters": [
          {
            "name": "folderGUID",
            "description": "Unique Folder ID",
            "type": "string",
            "required": false,
            "values": [ "INBOX" ]
          },
          {
            "name": "page",
            "description": "Offset",
            "type": "string",
            "required": false,
            "values": [ "1" ]
          }
        ],
        "request": {
          "description": "The request body.",
          "queryParameters": [],
          "headers": []
        },
        "responses": []
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/apis/operations/policies",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/inbox/layout/policy')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service/apis/operations', parameters('service_NewsBoard_Insights_name'), 'inbox', 'layout')]",
        "[resourceId('Microsoft.ApiManagement/service/apis', parameters('service_NewsBoard_Insights_name'), 'inbox')]",
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"LayoutInbox\" />\r\n    <set-variable name='azureID' value='@(context.Request.Headers.GetValueOrDefault(\"azureID\",\"\"))' />\r\n      <set-method>GET</set-method>\r\n    <rewrite-uri template=\"@($&quot;/manual/paths/invoke/member/{(string)context.Variables[&quot;azureID&quot;]}/folder/{(string)context.Request.MatchedParameters[&quot;folderGUID&quot;]}/page/{(string)context.Request.MatchedParameters[&quot;page&quot;]}?api-version=2016-06-01&amp;amp;sp=%2Ftriggers%2Fmanual%2Frun&amp;amp;sv=1.0&amp;amp;sig={{ViewInboxKey}}&quot;)\" />\r\n    <set-header name='Ocp-Apim-Subscription-Key' exists-action='delete' />\r\n</inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
        "format": "xml"
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/apis/operations",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/inbox/read')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service/apis', parameters('service_NewsBoard_Insights_name'), 'inbox')]",
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "displayName": "Get Any Folder",
        "description": "Get Any Folder (Refresh Version)",
        "method": "GET",
        "urlTemplate": "/read/{folderGUID}/{page}",
        "templateParameters": [
          {
            "name": "folderGUID",
            "description": "Unique Folder ID",
            "type": "string",
            "required": false,
            "values": [ "INBOX" ]
          },
          {
            "name": "page",
            "description": "Offset",
            "type": "string",
            "required": false,
            "values": [ "1" ]
          }
        ],
        "request": {
          "description": "The request body.",
          "queryParameters": [],
          "headers": []
        },
        "responses": []
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/apis/operations/policies",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/inbox/read/policy')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service/apis/operations', parameters('service_NewsBoard_Insights_name'), 'inbox', 'read')]",
        "[resourceId('Microsoft.ApiManagement/service/apis', parameters('service_NewsBoard_Insights_name'), 'message')]",
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"ListMessage\" />\r\n    <set-variable name='azureID' value='@(context.Request.Headers.GetValueOrDefault(\"azureID\",\"\"))' />\r\n      <set-method>GET</set-method>\r\n    <rewrite-uri template=\"@($&quot;/manual/paths/invoke/member/{(string)context.Variables[&quot;azureID&quot;]}/folder/{(string)context.Request.MatchedParameters[&quot;folderGUID&quot;]}/page/{(string)context.Request.MatchedParameters[&quot;page&quot;]}?api-version=2016-06-01&amp;amp;sp=%2Ftriggers%2Fmanual%2Frun&amp;amp;sv=1.0&amp;amp;sig={{NewsletterListKey}}&quot;)\" />\r\n    <set-header name='Ocp-Apim-Subscription-Key' exists-action='delete' />\r\n</inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
        "format": "xml"
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/apis",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/message')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "displayName": "Message",
        "apiRevision": "1",
        "description": "User Message",
        "subscriptionRequired": false,
        "path": "message",
        "protocols": [
          "https"
        ],
        "isCurrent": true
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/apis/operations",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/message/layout')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service/apis', parameters('service_NewsBoard_Insights_name'), 'message')]",
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "displayName": "Get Message Layout",
        "description": "Get Message Full Layout",
        "method": "GET",
        "urlTemplate": "/{newsletterGUID}",
        "templateParameters": [
          {
            "name": "newsletterGUID",
            "description": "Newsletter ID",
            "type": "string",
            "required": true,
            "values": []
          }
        ],
        "request": {
          "description": "The request body.",
          "queryParameters": [],
          "headers": []
        },
        "responses": []
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/apis/operations/policies",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/message/layout/policy')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service/apis/operations', parameters('service_NewsBoard_Insights_name'), 'message', 'layout')]",
        "[resourceId('Microsoft.ApiManagement/service/apis', parameters('service_NewsBoard_Insights_name'), 'message')]",
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"LayoutMessage\" />\r\n      <set-method>GET</set-method>\r\n    <rewrite-uri template=\"@($&quot;/manual/paths/invoke/member/{(string)context.Variables[&quot;azureID&quot;]}/message/{(string)context.Request.MatchedParameters[&quot;newsletterGUID&quot;]}?api-version=2016-06-01&amp;amp;sp=%2Ftriggers%2Fmanual%2Frun&amp;amp;sv=1.0&amp;amp;sig={{ViewMessageKey}}&quot;)\" />\r\n    <set-header name='Ocp-Apim-Subscription-Key' exists-action='delete' />\r\n</inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
        "format": "xml"
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/apis/operations",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/message/read')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service/apis', parameters('service_NewsBoard_Insights_name'), 'message')]",
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "displayName": "Get Message",
        "description": "Get Message (Refresh Version)",
        "method": "GET",
        "urlTemplate": "/read/{newsletterGUID}",
        "templateParameters": [
          {
            "name": "newsletterGUID",
            "description": "Newsletter ID",
            "type": "string",
            "required": true,
            "values": []
          }
        ],
        "request": {
          "description": "The request body.",
          "queryParameters": [],
          "headers": []
        },
        "responses": []
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/apis/operations/policies",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/message/read/policy')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service/apis/operations', parameters('service_NewsBoard_Insights_name'), 'message', 'read')]",
        "[resourceId('Microsoft.ApiManagement/service/apis', parameters('service_NewsBoard_Insights_name'), 'message')]",
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"ViewMessage\" />\r\n      <set-method>GET</set-method>\r\n    <rewrite-uri template=\"@($&quot;/manual/paths/invoke/member/{(string)context.Variables[&quot;azureID&quot;]}/message/{(string)context.Request.MatchedParameters[&quot;newsletterGUID&quot;]}?api-version=2016-06-01&amp;amp;sp=%2Ftriggers%2Fmanual%2Frun&amp;amp;sv=1.0&amp;amp;sig={{NewsletterItemKey}}&quot;)\" />\r\n    <set-header name='Ocp-Apim-Subscription-Key' exists-action='delete' />\r\n</inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
        "format": "xml"
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/apis/operations",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/message/update')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service/apis', parameters('service_NewsBoard_Insights_name'), 'message')]",
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "displayName": "Update Messages",
        "description": "UPDATE One or More Messages",
        "method": "PUT",
        "urlTemplate": "/state/{state}",
        "templateParameters": [
          {
            "name": "state",
            "description": "Read state",
            "type": "string",
            "required": true,
            "values": []
          }
        ],
        "request": {
          "description": "The request body.",
          "queryParameters": [],
          "headers": []
        },
        "responses": []
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/apis/operations/policies",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/message/update/policy')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service/apis/operations', parameters('service_NewsBoard_Insights_name'), 'message', 'update')]",
        "[resourceId('Microsoft.ApiManagement/service/apis', parameters('service_NewsBoard_Insights_name'), 'message')]",
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"UpdateMessage\" />\r\n      <set-method>POST</set-method>\r\n    <rewrite-uri template=\"@($&quot;/manual/paths/invoke/member/{(string)context.Variables[&quot;azureID&quot;]}/state/{(string)context.Request.MatchedParameters[&quot;state&quot;]}?api-version=2016-06-01&amp;amp;sp=%2Ftriggers%2Fmanual%2Frun&amp;amp;sv=1.0&amp;amp;sig={{NewsletterUpdateKey}}&quot;)\" />\r\n    <set-header name='Ocp-Apim-Subscription-Key' exists-action='delete' />\r\n</inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
        "format": "xml"
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/apis/operations",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/message/delete')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service/apis', parameters('service_NewsBoard_Insights_name'), 'message')]",
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "displayName": "Delete Messages",
        "description": "Delete One or More Messages",
        "method": "DELETE",
        "urlTemplate": "/",
        "templateParameters": [],
        "request": {
          "description": "The request body.",
          "queryParameters": [],
          "headers": []
        },
        "responses": []
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/apis/operations/policies",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/message/delete/policy')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service/apis/operations', parameters('service_NewsBoard_Insights_name'), 'message', 'delete')]",
        "[resourceId('Microsoft.ApiManagement/service/apis', parameters('service_NewsBoard_Insights_name'), 'message')]",
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"DeleteMessage\" />\r\n      <set-method>POST</set-method>\r\n    <rewrite-uri template=\"@($&quot;/manual/paths/invoke/member/{(string)context.Variables[&quot;azureID&quot;]}?api-version=2016-06-01&amp;amp;sp=%2Ftriggers%2Fmanual%2Frun&amp;amp;sv=1.0&amp;amp;sig={{NewsletterDeleteKey}}&quot;)\" />\r\n    <set-header name='Ocp-Apim-Subscription-Key' exists-action='delete' />\r\n</inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
        "format": "xml"
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/apis/operations",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/message/move')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service/apis', parameters('service_NewsBoard_Insights_name'), 'message')]",
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "displayName": "Move Messages",
        "description": "MOVE One or More Messages",
        "method": "PUT",
        "urlTemplate": "/move/{folderGUID}",
        "templateParameters": [
          {
            "name": "folderGUID",
            "description": "Target Folder GUID",
            "type": "string",
            "required": true,
            "values": []
          }
        ],
        "request": {
          "description": "The request body.",
          "queryParameters": [],
          "headers": []
        },
        "responses": []
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/apis/operations/policies",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/message/move/policy')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service/apis/operations', parameters('service_NewsBoard_Insights_name'), 'message', 'move')]",
        "[resourceId('Microsoft.ApiManagement/service/apis', parameters('service_NewsBoard_Insights_name'), 'message')]",
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"MoveMessage\" />\r\n      <set-method>POST</set-method>\r\n    <rewrite-uri template=\"@($&quot;/manual/paths/invoke/member/{(string)context.Variables[&quot;azureID&quot;]}/folder/{(string)context.Request.MatchedParameters[&quot;folderGUID&quot;]}?api-version=2016-06-01&amp;amp;sp=%2Ftriggers%2Fmanual%2Frun&amp;amp;sv=1.0&amp;amp;sig={{NewsletterMoveKey}}&quot;)\" />\r\n    <set-header name='Ocp-Apim-Subscription-Key' exists-action='delete' />\r\n</inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
        "format": "xml"
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/apis/operations",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/message/favorite')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service/apis', parameters('service_NewsBoard_Insights_name'), 'message')]",
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "displayName": "Favorite Message",
        "description": "Favorite Message",
        "method": "GET",
        "urlTemplate": "/favorite/{newsletterGUID}",
        "templateParameters": [
          {
            "name": "newsletterGUID",
            "description": "Newsletter ID",
            "type": "string",
            "required": true,
            "values": []
          }
        ],
        "request": {
          "description": "The request body.",
          "queryParameters": [],
          "headers": []
        },
        "responses": []
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/apis/operations/policies",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/message/favorite/policy')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service/apis/operations', parameters('service_NewsBoard_Insights_name'), 'message', 'favorite')]",
        "[resourceId('Microsoft.ApiManagement/service/apis', parameters('service_NewsBoard_Insights_name'), 'message')]",
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"FavoriteMessage\" />\r\n      <set-method>GET</set-method>\r\n    <rewrite-uri template=\"@($&quot;/manual/paths/invoke/member/{(string)context.Variables[&quot;azureID&quot;]}/message/{(string)context.Request.MatchedParameters[&quot;newsletterGUID&quot;]}?api-version=2016-06-01&amp;amp;sp=%2Ftriggers%2Fmanual%2Frun&amp;amp;sv=1.0&amp;amp;sig={{NewsletterFavoriteKey}}&quot;)\" />\r\n    <set-header name='Ocp-Apim-Subscription-Key' exists-action='delete' />\r\n</inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
        "format": "xml"
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/apis",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/folders')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "displayName": "Folders",
        "apiRevision": "1",
        "description": "Member Defined Folders",
        "subscriptionRequired": false,
        "path": "folders",
        "protocols": [
          "https"
        ],
        "isCurrent": true
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/apis/operations",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/folders/list')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service/apis', parameters('service_NewsBoard_Insights_name'), 'folders')]",
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "displayName": "List Member Defined Folders",
        "description": "Get All Folders",
        "method": "GET",
        "urlTemplate": "/",
        "templateParameters": [],
        "request": {
          "description": "The request body.",
          "queryParameters": [],
          "headers": []
        },
        "responses": []
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/apis/operations/policies",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/folders/list/policy')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service/apis/operations', parameters('service_NewsBoard_Insights_name'), 'folders', 'list')]",
        "[resourceId('Microsoft.ApiManagement/service/apis', parameters('service_NewsBoard_Insights_name'), 'folders')]",
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"ListFolder\" />\r\n      <set-method>GET</set-method>\r\n    <rewrite-uri template=\"@($&quot;/manual/paths/invoke/member/{(string)context.Variables[&quot;azureID&quot;]}?api-version=2016-06-01&amp;amp;sp=%2Ftriggers%2Fmanual%2Frun&amp;amp;sv=1.0&amp;amp;sig={{FolderListKey}}&quot;)\" />\r\n    <set-header name='Ocp-Apim-Subscription-Key' exists-action='delete' />\r\n</inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
        "format": "xml"
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/apis/operations",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/folders/add')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service/apis', parameters('service_NewsBoard_Insights_name'), 'folders')]",
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "displayName": "Add Member Defined Folder",
        "description": "Trigger a run of the logic app.",
        "method": "POST",
        "urlTemplate": "/",
        "templateParameters": [],
        "request": {
          "description": "The request body.",
          "queryParameters": [],
          "headers": []
        },
        "responses": []
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/apis/operations/policies",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/folders/add/policy')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service/apis/operations', parameters('service_NewsBoard_Insights_name'), 'folders', 'add')]",
        "[resourceId('Microsoft.ApiManagement/service/apis', parameters('service_NewsBoard_Insights_name'), 'folders')]",
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"AddFolder\" />\r\n      <set-method>POST</set-method>\r\n    <rewrite-uri template=\"@($&quot;/manual/paths/invoke/member/{(string)context.Variables[&quot;azureID&quot;]}?api-version=2016-06-01&amp;amp;sp=%2Ftriggers%2Fmanual%2Frun&amp;amp;sv=1.0&amp;amp;sig={{FolderAddKey}}&quot;)\" />\r\n    <set-header name='Ocp-Apim-Subscription-Key' exists-action='delete' />\r\n</inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
        "format": "xml"
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/apis/operations",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/folders/delete')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service/apis', parameters('service_NewsBoard_Insights_name'), 'folders')]",
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "displayName": "Delete Member Defined Folder",
        "description": "Trigger a run of the logic app.",
        "method": "DELETE",
        "urlTemplate": "/{folderGUID}",
        "templateParameters": [
          {
            "name": "folderGUID",
            "description": "Unique Folder ID",
            "type": "string",
            "required": true,
            "values": []
          }
        ],
        "request": {
          "description": "The request body.",
          "queryParameters": [],
          "headers": []
        },
        "responses": []
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/apis/operations/policies",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/folders/delete/policy')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service/apis/operations', parameters('service_NewsBoard_Insights_name'), 'folders', 'delete')]",
        "[resourceId('Microsoft.ApiManagement/service/apis', parameters('service_NewsBoard_Insights_name'), 'folders')]",
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"DeleteFolder\" />\r\n      <set-method>POST</set-method>\r\n    <rewrite-uri template=\"@($&quot;/manual/paths/invoke/member/{(string)context.Variables[&quot;azureID&quot;]}/folder/{(string)context.Request.MatchedParameters[&quot;folderGUID&quot;]}?api-version=2016-06-01&amp;amp;sp=%2Ftriggers%2Fmanual%2Frun&amp;amp;sv=1.0&amp;amp;sig={{FolderDeleteKey}}&quot;)\" />\r\n    <set-header name='Ocp-Apim-Subscription-Key' exists-action='delete' />\r\n</inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
        "format": "xml"
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/apis",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/member')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "displayName": "Members",
        "apiRevision": "1",
        "description": "Member Accounts",
        "subscriptionRequired": false,
        "path": "member",
        "protocols": [
          "https"
        ],
        "isCurrent": true
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/apis/operations",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/member/check')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service/apis', parameters('service_NewsBoard_Insights_name'), 'member')]",
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "displayName": "Check Member",
        "description": "Check for Local ID availability",
        "method": "GET",
        "urlTemplate": "/check/{requestedLocalID}",
        "templateParameters": [
          {
            "name": "requestedLocalID",
            "description": "Requested Local ID",
            "type": "string",
            "required": true,
            "values": []
          }
        ],
        "request": {
          "description": "The request body.",
          "queryParameters": [],
          "headers": []
        },
        "responses": []
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/apis/operations/policies",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/member/check/policy')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service/apis/operations', parameters('service_NewsBoard_Insights_name'), 'member', 'check')]",
        "[resourceId('Microsoft.ApiManagement/service/apis', parameters('service_NewsBoard_Insights_name'), 'member')]",
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"CheckMember\" />\r\n      <set-method>GET</set-method>\r\n    <rewrite-uri template=\"@($&quot;/manual/paths/invoke/requested/{(string)context.Request.MatchedParameters[&quot;requestedLocalID&quot;]}?api-version=2016-06-01&amp;amp;sp=%2Ftriggers%2Fmanual%2Frun&amp;amp;sv=1.0&amp;amp;sig={{MemberCheckKey}}&quot;)\" />\r\n    <set-header name='Ocp-Apim-Subscription-Key' exists-action='delete' />\r\n</inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
        "format": "xml"
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/apis/operations",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/member/add')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service/apis', parameters('service_NewsBoard_Insights_name'), 'member')]",
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "displayName": "Add Member Account",
        "description": "Trigger a run of the logic app.",
        "method": "POST",
        "urlTemplate": "/",
        "templateParameters": [],
        "request": {
          "description": "The request body.",
          "queryParameters": [],
          "headers": []
        },
        "responses": []
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/apis/operations/policies",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/member/add/policy')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service/apis/operations', parameters('service_NewsBoard_Insights_name'), 'member', 'add')]",
        "[resourceId('Microsoft.ApiManagement/service/apis', parameters('service_NewsBoard_Insights_name'), 'member')]",
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"AddMember\" />\r\n      <set-method>POST</set-method>\r\n    <rewrite-uri template=\"@($&quot;/manual/paths/invoke/member/{(string)context.Variables[&quot;azureID&quot;]}?api-version=2016-06-01&amp;amp;sp=%2Ftriggers%2Fmanual%2Frun&amp;amp;sv=1.0&amp;amp;sig={{MemberAddKey}}&quot;)\" />\r\n    <set-header name='Ocp-Apim-Subscription-Key' exists-action='delete' />\r\n</inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
        "format": "xml"
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/apis/operations",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/member/update')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service/apis', parameters('service_NewsBoard_Insights_name'), 'member')]",
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "displayName": "Update Member Account",
        "description": "Trigger a run of the logic app.",
        "method": "PUT",
        "urlTemplate": "/",
        "templateParameters": [],
        "request": {
          "description": "The request body.",
          "queryParameters": [],
          "headers": []
        },
        "responses": []
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/apis/operations/policies",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/member/update/policy')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service/apis/operations', parameters('service_NewsBoard_Insights_name'), 'member', 'update')]",
        "[resourceId('Microsoft.ApiManagement/service/apis', parameters('service_NewsBoard_Insights_name'), 'member')]",
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"UpdateMember\" />\r\n      <set-method>POST</set-method>\r\n    <rewrite-uri template=\"@($&quot;/manual/paths/invoke/member/{(string)context.Variables[&quot;azureID&quot;]}?api-version=2016-06-01&amp;amp;sp=%2Ftriggers%2Fmanual%2Frun&amp;amp;sv=1.0&amp;amp;sig={{MemberUpdateKey}}&quot;)\" />\r\n    <set-header name='Ocp-Apim-Subscription-Key' exists-action='delete' />\r\n</inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
        "format": "xml"
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/apis",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/annotations')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "displayName": "Annotations",
        "apiRevision": "1",
        "description": "Newsletters Annotations",
        "subscriptionRequired": false,
        "protocols": [
          "https"
        ],
        "isCurrent": true,
        "path": "annotations"
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/apis/operations",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/annotations/read')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service/apis', parameters('service_NewsBoard_Insights_name'), 'annotations')]",
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "displayName": "Read Annotations",
        "method": "GET",
        "urlTemplate": "/{newsletterGUID}",
        "templateParameters": [
          {
            "name": "newsletterGUID",
            "description": "Unique Newsletter ID",
            "type": "string",
            "required": true,
            "values": []
          }
        ],
        "responses": []
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/apis/operations/policies",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/annotations/read/policy')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service/apis/operations', parameters('service_NewsBoard_Insights_name'), 'annotations', 'read')]",
        "[resourceId('Microsoft.ApiManagement/service/apis', parameters('service_NewsBoard_Insights_name'), 'annotations')]",
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"ReadAnnotations\" />\r\n      <set-method>GET</set-method>\r\n    <rewrite-uri template=\"@($&quot;/manual/paths/invoke/member/{(string)context.Variables[&quot;azureID&quot;]}/message/{(string)context.Request.MatchedParameters[&quot;newsletterGUID&quot;]}?api-version=2016-06-01&amp;amp;sp=%2Ftriggers%2Fmanual%2Frun&amp;amp;sv=1.0&amp;amp;sig={{AnnotationsReadKey}}&quot;)\" />\r\n    <set-header name='Ocp-Apim-Subscription-Key' exists-action='delete' />\r\n</inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
        "format": "xml"
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/apis/operations",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/annotations/add')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service/apis', parameters('service_NewsBoard_Insights_name'), 'annotations')]",
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "displayName": "Read Annotations",
        "method": "POST",
        "urlTemplate": "/{newsletterGUID}",
        "templateParameters": [
          {
            "name": "newsletterGUID",
            "description": "Unique Newsletter ID",
            "type": "string",
            "required": true,
            "values": []
          }
        ],
        "responses": []
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/apis/operations/policies",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/annotations/add/policy')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service/apis/operations', parameters('service_NewsBoard_Insights_name'), 'annotations', 'add')]",
        "[resourceId('Microsoft.ApiManagement/service/apis', parameters('service_NewsBoard_Insights_name'), 'annotations')]",
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"AddAnnotations\" />\r\n      <set-method>POST</set-method>\r\n    <rewrite-uri template=\"@($&quot;/manual/paths/invoke/member/{(string)context.Variables[&quot;azureID&quot;]}/message/{(string)context.Request.MatchedParameters[&quot;newsletterGUID&quot;]}?api-version=2016-06-01&amp;amp;sp=%2Ftriggers%2Fmanual%2Frun&amp;amp;sv=1.0&amp;amp;sig={{AnnotationsAddKey}}&quot;)\" />\r\n    <set-header name='Ocp-Apim-Subscription-Key' exists-action='delete' />\r\n</inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
        "format": "xml"
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/apis/operations",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/annotations/update')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service/apis', parameters('service_NewsBoard_Insights_name'), 'annotations')]",
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "displayName": "Update Annotations",
        "method": "PUT",
        "urlTemplate": "/{newsletterGUID}/{annotationGUID}",
        "templateParameters": [
          {
            "name": "newsletterGUID",
            "description": "Unique Newsletter ID",
            "type": "string",
            "required": true,
            "values": []
          },
          {
            "name": "annotationGUID",
            "description": "Unique Annotation ID",
            "type": "string",
            "required": true,
            "values": []
          }
        ],
        "responses": []
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/apis/operations/policies",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/annotations/update/policy')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service/apis/operations', parameters('service_NewsBoard_Insights_name'), 'annotations', 'update')]",
        "[resourceId('Microsoft.ApiManagement/service/apis', parameters('service_NewsBoard_Insights_name'), 'annotations')]",
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"UpdateAnnotations\" />\r\n      <set-method>POST</set-method>\r\n    <rewrite-uri template=\"@($&quot;/manual/paths/invoke/member/{(string)context.Variables[&quot;azureID&quot;]}/message/{(string)context.Request.MatchedParameters[&quot;newsletterGUID&quot;]}/note/{(string)context.Request.MatchedParameters[&quot;annotationGUID&quot;]}?api-version=2016-06-01&amp;amp;sp=%2Ftriggers%2Fmanual%2Frun&amp;amp;sv=1.0&amp;amp;sig={{AnnotationsUpdateKey}}&quot;)\" />\r\n    <set-header name='Ocp-Apim-Subscription-Key' exists-action='delete' />\r\n</inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
        "format": "xml"
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/apis/operations",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/annotations/delete')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service/apis', parameters('service_NewsBoard_Insights_name'), 'annotations')]",
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "displayName": "DELETE Annotations",
        "method": "DELETE",
        "urlTemplate": "/{newsletterGUID}/{annotationGUID}",
        "templateParameters": [
          {
            "name": "newsletterGUID",
            "description": "Unique Newsletter ID",
            "type": "string",
            "required": true,
            "values": []
          },
          {
            "name": "annotationGUID",
            "description": "Unique Annotation ID",
            "type": "string",
            "required": true,
            "values": []
          }
        ],
        "responses": []
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/apis/operations/policies",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/annotations/delete/policy')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service/apis/operations', parameters('service_NewsBoard_Insights_name'), 'annotations', 'delete')]",
        "[resourceId('Microsoft.ApiManagement/service/apis', parameters('service_NewsBoard_Insights_name'), 'annotations')]",
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"DeleteAnnotations\" />\r\n      <set-method>GET</set-method>\r\n    <rewrite-uri template=\"@($&quot;/manual/paths/invoke/member/{(string)context.Variables[&quot;azureID&quot;]}/message/{(string)context.Request.MatchedParameters[&quot;newsletterGUID&quot;]}/note/{(string)context.Request.MatchedParameters[&quot;annotationGUID&quot;]}?api-version=2016-06-01&amp;amp;sp=%2Ftriggers%2Fmanual%2Frun&amp;amp;sv=1.0&amp;amp;sig={{AnnotationsDeleteKey}}&quot;)\" />\r\n    <set-header name='Ocp-Apim-Subscription-Key' exists-action='delete' />\r\n</inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
        "format": "xml"
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/apis",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/parse')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "displayName": "Parse",
        "apiRevision": "1",
        "description": "Parsing Engine for Newsletters",
        "subscriptionRequired": false,
        "protocols": [
          "https"
        ],
        "isCurrent": true,
        "path": "parse"
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/apis/operations",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/parse/exec')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service/apis', parameters('service_NewsBoard_Insights_name'), 'parse')]",
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "displayName": "Parser",
        "method": "POST",
        "urlTemplate": "/",
        "templateParameters": [],
        "responses": []
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/apis/operations/policies",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/parse/exec/policy')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service/apis/operations', parameters('service_NewsBoard_Insights_name'), 'parse', 'exec')]",
        "[resourceId('Microsoft.ApiManagement/service/apis', parameters('service_NewsBoard_Insights_name'), 'parse')]",
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"newsboard-parser\" />\r\n      <set-method>POST</set-method>\r\n    <rewrite-uri template=\"@($&quot;?code={{NewsboardParserKey}}&quot;)\" />\r\n      </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
        "format": "xml"
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/loggers",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/', parameters('service_NewsBoard_Insights_name'))]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "loggerType": "applicationInsights",
        "credentials": {
          "instrumentationKey": "{{ApplicationInsightsKey}}"
        },
        "isBuffered": true,
        "resourceId": "[parameters('components_NewsBoard_Insights_externalid')]"
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/diagnostics",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/applicationinsights')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]",
        "[resourceId('Microsoft.ApiManagement/service/loggers', parameters('service_NewsBoard_Insights_name'), parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "alwaysLog": "allErrors",
        "httpCorrelationProtocol": "Legacy",
        "logClientIp": true,
        "loggerId": "[resourceId('Microsoft.ApiManagement/service/loggers', parameters('service_NewsBoard_Insights_name'), parameters('service_NewsBoard_Insights_name'))]",
        "sampling": {
          "samplingType": "fixed",
          "percentage": 100
        }
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/diagnostics/loggers",
      "apiVersion": "2018-01-01",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/applicationinsights/', parameters('service_NewsBoard_Insights_name'))]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service/diagnostics', parameters('service_NewsBoard_Insights_name'), 'applicationinsights')]",
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ]
    },
    {
      "type": "Microsoft.ApiManagement/service/apis/diagnostics",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/parse/applicationinsights')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service/apis', parameters('service_NewsBoard_Insights_name'), 'parse')]",
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]",
        "[resourceId('Microsoft.ApiManagement/service/loggers', parameters('service_NewsBoard_Insights_name'), parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "alwaysLog": "allErrors",
        "httpCorrelationProtocol": "Legacy",
        "verbosity": "information",
        "logClientIp": true,
        "loggerId": "[resourceId('Microsoft.ApiManagement/service/loggers', parameters('service_NewsBoard_Insights_name'), parameters('service_NewsBoard_Insights_name'))]",
        "sampling": {
          "samplingType": "fixed",
          "percentage": 100
        },
        "frontend": {
          "request": {
            "headers": [],
            "body": {
              "bytes": 0
            }
          },
          "response": {
            "headers": [],
            "body": {
              "bytes": 0
            }
          }
        },
        "backend": {
          "request": {
            "headers": [],
            "body": {
              "bytes": 0
            }
          },
          "response": {
            "headers": [],
            "body": {
              "bytes": 0
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/apis/diagnostics/loggers",
      "apiVersion": "2018-01-01",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/parse/applicationinsights/', parameters('service_NewsBoard_Insights_name'))]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service/apis/diagnostics', parameters('service_NewsBoard_Insights_name'), 'parse', 'applicationinsights')]",
        "[resourceId('Microsoft.ApiManagement/service/apis', parameters('service_NewsBoard_Insights_name'), 'parse')]",
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ]
    },
    {
      "type": "Microsoft.ApiManagement/service/groups",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/administrators')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "displayName": "Administrators",
        "description": "Administrators is a built-in group. Its membership is managed by the system. Microsoft Azure subscription administrators fall into this group.",
        "type": "system"
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/groups",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/developers')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "displayName": "Developers",
        "description": "Developers is a built-in group. Its membership is managed by the system. Signed-in users fall into this group.",
        "type": "system"
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/groups",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/guests')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "displayName": "Guests",
        "description": "Guests is a built-in group. Its membership is managed by the system. Unauthenticated users visiting the developer portal fall into this group.",
        "type": "system"
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/products",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/starter')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "displayName": "Starter",
        "description": "Subscribers will be able to run 5 calls/minute up to a maximum of 100 calls/week.",
        "subscriptionsLimit": 1,
        "state": "published"
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/products",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/unlimited')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "displayName": "Unlimited",
        "description": "Subscribers have completely unlimited access to the API. Administrator approval is required.",
        "subscriptionsLimit": 1,
        "state": "published"
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/products/apis",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/unlimited/inbox')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service/products', parameters('service_NewsBoard_Insights_name'), 'unlimited')]",
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ]
    },
    {
      "type": "Microsoft.ApiManagement/service/products/apis",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/unlimited/message')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service/products', parameters('service_NewsBoard_Insights_name'), 'unlimited')]",
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ]
    },
    {
      "type": "Microsoft.ApiManagement/service/products/apis",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/unlimited/parse')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service/products', parameters('service_NewsBoard_Insights_name'), 'unlimited')]",
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ]
    },
    {
      "type": "Microsoft.ApiManagement/service/products/groups",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/starter/administrators')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service/products', parameters('service_NewsBoard_Insights_name'), 'starter')]",
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ]
    },
    {
      "type": "Microsoft.ApiManagement/service/products/groups",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/unlimited/administrators')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service/products', parameters('service_NewsBoard_Insights_name'), 'unlimited')]",
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ]
    },
    {
      "type": "Microsoft.ApiManagement/service/products/groups",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/starter/developers')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service/products', parameters('service_NewsBoard_Insights_name'), 'starter')]",
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ]
    },
    {
      "type": "Microsoft.ApiManagement/service/products/groups",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/unlimited/developers')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service/products', parameters('service_NewsBoard_Insights_name'), 'unlimited')]",
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ]
    },
    {
      "type": "Microsoft.ApiManagement/service/products/groups",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/starter/guests')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service/products', parameters('service_NewsBoard_Insights_name'), 'starter')]",
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ]
    },
    {
      "type": "Microsoft.ApiManagement/service/products/groups",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/unlimited/guests')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service/products', parameters('service_NewsBoard_Insights_name'), 'unlimited')]",
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ]
    },
    {
      "type": "Microsoft.ApiManagement/service/products/policies",
      "apiVersion": "2019-12-01-preview",
      "name": "[concat(parameters('service_NewsBoard_Insights_name'), '/starter/policy')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service/products', parameters('service_NewsBoard_Insights_name'), 'starter')]",
        "[resourceId('Microsoft.ApiManagement/service', parameters('service_NewsBoard_Insights_name'))]"
      ],
      "properties": {
        "value": "<!--\r\n            IMPORTANT:\r\n            - Policy elements can appear only within the <inbound>, <outbound>, <backend> section elements.\r\n            - Only the <forward-request> policy element can appear within the <backend> section element.\r\n            - To apply a policy to the incoming request (before it is forwarded to the backend service), place a corresponding policy element within the <inbound> section element.\r\n            - To apply a policy to the outgoing response (before it is sent back to the caller), place a corresponding policy element within the <outbound> section element.\r\n            - To add a policy position the cursor at the desired insertion point and click on the round button associated with the policy.\r\n            - To remove a policy, delete the corresponding policy statement from the policy document.\r\n            - Position the <base> element within a section element to inherit all policies from the corresponding section element in the enclosing scope.\r\n            - Remove the <base> element to prevent inheriting policies from the corresponding section element in the enclosing scope.\r\n            - Policies are applied in the order of their appearance, from the top down.\r\n        -->\r\n<policies>\r\n  <inbound>\r\n    <rate-limit calls=\"5\" renewal-period=\"60\" />\r\n    <quota calls=\"100\" renewal-period=\"604800\" />\r\n    <base />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n</policies>",
        "format": "xml"
      }
    }
  ],
  "outputs": {}
}
